
FanControler_v1.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001626  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00001626  000016ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009e  0080006e  0080006e  000016c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d88  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e58  00000000  00000000  00003704  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001725  00000000  00000000  0000455c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f0  00000000  00000000  00005c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000094d  00000000  00000000  00006274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000af6  00000000  00000000  00006bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  000076b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
       2:	17 c8       	rjmp	.-4050   	; 0xfffff032 <__eeprom_end+0xff7ef032>
       4:	55 c4       	rjmp	.+2218   	; 0x8b0 <__vector_2>
       6:	61 c7       	rjmp	.+3778   	; 0xeca <__vector_3>
       8:	5d c0       	rjmp	.+186    	; 0xc4 <__bad_interrupt>
       a:	b0 c0       	rjmp	.+352    	; 0x16c <__vector_5>
       c:	5b c0       	rjmp	.+182    	; 0xc4 <__bad_interrupt>
       e:	5a c0       	rjmp	.+180    	; 0xc4 <__bad_interrupt>
      10:	59 c0       	rjmp	.+178    	; 0xc4 <__bad_interrupt>
      12:	9d c4       	rjmp	.+2362   	; 0x94e <__vector_9>
      14:	57 c0       	rjmp	.+174    	; 0xc4 <__bad_interrupt>
      16:	80 c7       	rjmp	.+3840   	; 0xf18 <__vector_11>
      18:	ab c7       	rjmp	.+3926   	; 0xf70 <__vector_12>
      1a:	54 c0       	rjmp	.+168    	; 0xc4 <__bad_interrupt>
      1c:	05 c5       	rjmp	.+2570   	; 0xa28 <__vector_14>
      1e:	52 c0       	rjmp	.+164    	; 0xc4 <__bad_interrupt>
      20:	51 c0       	rjmp	.+162    	; 0xc4 <__bad_interrupt>
      22:	50 c0       	rjmp	.+160    	; 0xc4 <__bad_interrupt>
      24:	4f c0       	rjmp	.+158    	; 0xc4 <__bad_interrupt>
      26:	03 c4       	rjmp	.+2054   	; 0x82e <Error_Handler+0x150>
      28:	0e c4       	rjmp	.+2076   	; 0x846 <Error_Handler+0x168>
      2a:	19 c4       	rjmp	.+2098   	; 0x85e <Error_Handler+0x180>
      2c:	06 c4       	rjmp	.+2060   	; 0x83a <Error_Handler+0x15c>
      2e:	11 c4       	rjmp	.+2082   	; 0x852 <Error_Handler+0x174>
      30:	1c c4       	rjmp	.+2104   	; 0x86a <Error_Handler+0x18c>
      32:	21 c4       	rjmp	.+2114   	; 0x876 <Error_Handler+0x198>
      34:	08 00       	.word	0x0008	; ????
      36:	00 00       	nop
      38:	be 92       	st	-X, r11
      3a:	24 49       	sbci	r18, 0x94	; 148
      3c:	12 3e       	cpi	r17, 0xE2	; 226
      3e:	ab aa       	std	Y+51, r10	; 0x33
      40:	aa 2a       	or	r10, r26
      42:	be cd       	rjmp	.-1156   	; 0xfffffbc0 <__eeprom_end+0xff7efbc0>
      44:	cc cc       	rjmp	.-1640   	; 0xfffff9de <__eeprom_end+0xff7ef9de>
      46:	4c 3e       	cpi	r20, 0xEC	; 236
      48:	00 00       	nop
      4a:	00 80       	ld	r0, Z
      4c:	be ab       	std	Y+54, r27	; 0x36
      4e:	aa aa       	std	Y+50, r10	; 0x32
      50:	aa 3e       	cpi	r26, 0xEA	; 234
      52:	00 00       	nop
      54:	00 00       	nop
      56:	bf 00       	.word	0x00bf	; ????
      58:	00 00       	nop
      5a:	80 3f       	cpi	r24, 0xF0	; 240
      5c:	00 00       	nop
      5e:	00 00       	nop
      60:	00 08       	sbc	r0, r0
      62:	41 78       	andi	r20, 0x81	; 129
      64:	d3 bb       	out	0x13, r29	; 19
      66:	43 87       	std	Z+11, r20	; 0x0b
      68:	d1 13       	cpse	r29, r17
      6a:	3d 19       	sub	r19, r13
      6c:	0e 3c       	cpi	r16, 0xCE	; 206
      6e:	c3 bd       	out	0x23, r28	; 35
      70:	42 82       	std	Z+2, r4	; 0x02
      72:	ad 2b       	or	r26, r29
      74:	3e 68       	ori	r19, 0x8E	; 142
      76:	ec 82       	std	Y+4, r14	; 0x04
      78:	76 be       	out	0x36, r7	; 54
      7a:	d9 8f       	std	Y+25, r29	; 0x19
      7c:	e1 a9       	ldd	r30, Z+49	; 0x31
      7e:	3e 4c       	sbci	r19, 0xCE	; 206
      80:	80 ef       	ldi	r24, 0xF0	; 240
      82:	ff be       	out	0x3f, r15	; 63
      84:	01 c4       	rjmp	.+2050   	; 0x888 <Error_Handler+0x1aa>
      86:	ff 7f       	andi	r31, 0xFF	; 255
      88:	3f 00       	.word	0x003f	; ????
      8a:	00 00       	nop
	...

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf e5       	ldi	r28, 0x5F	; 95
      94:	d4 e0       	ldi	r29, 0x04	; 4
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
      9a:	10 e0       	ldi	r17, 0x00	; 0
      9c:	a0 e6       	ldi	r26, 0x60	; 96
      9e:	b0 e0       	ldi	r27, 0x00	; 0
      a0:	e6 e2       	ldi	r30, 0x26	; 38
      a2:	f6 e1       	ldi	r31, 0x16	; 22
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	ae 36       	cpi	r26, 0x6E	; 110
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	21 e0       	ldi	r18, 0x01	; 1
      b2:	ae e6       	ldi	r26, 0x6E	; 110
      b4:	b0 e0       	ldi	r27, 0x00	; 0
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	ac 30       	cpi	r26, 0x0C	; 12
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	1a d4       	rcall	.+2100   	; 0x8f6 <main>
      c2:	af ca       	rjmp	.-2722   	; 0xfffff622 <__eeprom_end+0xff7ef622>

000000c4 <__bad_interrupt>:
      c4:	9d cf       	rjmp	.-198    	; 0x0 <__vectors>

000000c6 <Capture_Pulde_Init>:
*normal mode , no pres , noise cancell , intrupt enable
*/

void Capture_Pulde_Init()
{
	DDRB &=~(1<<0);
      c6:	b8 98       	cbi	0x17, 0	; 23
	PORTB &=~(1<<0);
      c8:	c0 98       	cbi	0x18, 0	; 24
	tccr1A_timer1 =0;
      ca:	1f bc       	out	0x2f, r1	; 47
	tccr1B_timer1 |= (1<< ICNC1);
      cc:	8e b5       	in	r24, 0x2e	; 46
      ce:	80 68       	ori	r24, 0x80	; 128
      d0:	8e bd       	out	0x2e, r24	; 46
	printSys = get_Systick(); //count for the start capture
      d2:	f2 d6       	rcall	.+3556   	; 0xeb8 <get_Systick>
      d4:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <printSys>
      d8:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <printSys+0x1>
      dc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <printSys+0x2>
      e0:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <printSys+0x3>
      e4:	08 95       	ret

000000e6 <Loop_Capture>:
	
	
}

void Loop_Capture()
{
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
	if (get_Systick()>= printSys)
      ea:	e6 d6       	rcall	.+3532   	; 0xeb8 <get_Systick>
      ec:	00 91 74 00 	lds	r16, 0x0074	; 0x800074 <printSys>
      f0:	10 91 75 00 	lds	r17, 0x0075	; 0x800075 <printSys+0x1>
      f4:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <printSys+0x2>
      f8:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <printSys+0x3>
      fc:	60 17       	cp	r22, r16
      fe:	71 07       	cpc	r23, r17
     100:	82 07       	cpc	r24, r18
     102:	93 07       	cpc	r25, r19
     104:	80 f1       	brcs	.+96     	; 0x166 <Loop_Capture+0x80>
	{
		if (check_intrrupt == 1)
     106:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     10a:	81 30       	cpi	r24, 0x01	; 1
     10c:	81 f4       	brne	.+32     	; 0x12e <Loop_Capture+0x48>
		{
		
				TCNT1=0;
     10e:	1d bc       	out	0x2d, r1	; 45
     110:	1c bc       	out	0x2c, r1	; 44
				ICR1 =0;
     112:	17 bc       	out	0x27, r1	; 39
     114:	16 bc       	out	0x26, r1	; 38
				counter_step = step_1; // for the save status of the edge
     116:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <counter_step>
				TIMSK |= (1<<TICIE1); //enable intrrupt capture timer_1
     11a:	89 b7       	in	r24, 0x39	; 57
     11c:	80 62       	ori	r24, 0x20	; 32
     11e:	89 bf       	out	0x39, r24	; 57
				TCCR1B |= (1<<ICES1)|(1<<CS10)|(1<< ICNC1);
     120:	8e b5       	in	r24, 0x2e	; 46
     122:	81 6c       	ori	r24, 0xC1	; 193
     124:	8e bd       	out	0x2e, r24	; 46
				check_intrrupt = 0;
     126:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
				sei();
     12a:	78 94       	sei
     12c:	0d c0       	rjmp	.+26     	; 0x148 <Loop_Capture+0x62>
		
		}
		else
		{
			if (PINB & (1<<0))
     12e:	b0 9b       	sbis	0x16, 0	; 22
     130:	07 c0       	rjmp	.+14     	; 0x140 <Loop_Capture+0x5a>
			{
				final_dutycycle = 100;
     132:	84 e6       	ldi	r24, 0x64	; 100
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <final_dutycycle+0x1>
     13a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <final_dutycycle>
     13e:	04 c0       	rjmp	.+8      	; 0x148 <Loop_Capture+0x62>
			}
			else 
			{
				final_dutycycle =0 ;
     140:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <final_dutycycle+0x1>
     144:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <final_dutycycle>
			}
		}
		printSys = get_Systick() + 3000;
     148:	b7 d6       	rcall	.+3438   	; 0xeb8 <get_Systick>
     14a:	dc 01       	movw	r26, r24
     14c:	cb 01       	movw	r24, r22
     14e:	88 54       	subi	r24, 0x48	; 72
     150:	94 4f       	sbci	r25, 0xF4	; 244
     152:	af 4f       	sbci	r26, 0xFF	; 255
     154:	bf 4f       	sbci	r27, 0xFF	; 255
     156:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <printSys>
     15a:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <printSys+0x1>
     15e:	a0 93 76 00 	sts	0x0076, r26	; 0x800076 <printSys+0x2>
     162:	b0 93 77 00 	sts	0x0077, r27	; 0x800077 <printSys+0x3>
	}
}
     166:	1f 91       	pop	r17
     168:	0f 91       	pop	r16
     16a:	08 95       	ret

0000016c <__vector_5>:

ISR(CAPTURE_ISR)
{
     16c:	1f 92       	push	r1
     16e:	0f 92       	push	r0
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	0f 92       	push	r0
     174:	11 24       	eor	r1, r1
     176:	cf 92       	push	r12
     178:	df 92       	push	r13
     17a:	ef 92       	push	r14
     17c:	ff 92       	push	r15
     17e:	0f 93       	push	r16
     180:	1f 93       	push	r17
     182:	2f 93       	push	r18
     184:	3f 93       	push	r19
     186:	4f 93       	push	r20
     188:	5f 93       	push	r21
     18a:	6f 93       	push	r22
     18c:	7f 93       	push	r23
     18e:	8f 93       	push	r24
     190:	9f 93       	push	r25
     192:	af 93       	push	r26
     194:	bf 93       	push	r27
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	ef 93       	push	r30
     19c:	ff 93       	push	r31
	cli();
     19e:	f8 94       	cli
	check_intrrupt = 1;
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	if (counter_step == step_1)
     1a6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <counter_step>
     1aa:	81 30       	cpi	r24, 0x01	; 1
     1ac:	69 f4       	brne	.+26     	; 0x1c8 <__vector_5+0x5c>
	{
		a = ICR1;
     1ae:	86 b5       	in	r24, 0x26	; 38
     1b0:	97 b5       	in	r25, 0x27	; 39
     1b2:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <a+0x1>
     1b6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <a>
		counter_step = step_2;
     1ba:	82 e0       	ldi	r24, 0x02	; 2
     1bc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <counter_step>
		TCCR1B &= ~(1<<ICES1);  //select failing edge
     1c0:	8e b5       	in	r24, 0x2e	; 46
     1c2:	8f 7b       	andi	r24, 0xBF	; 191
     1c4:	8e bd       	out	0x2e, r24	; 46
     1c6:	7a c0       	rjmp	.+244    	; 0x2bc <__vector_5+0x150>
	}
	else if (counter_step == step_2 )
     1c8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <counter_step>
     1cc:	82 30       	cpi	r24, 0x02	; 2
     1ce:	69 f4       	brne	.+26     	; 0x1ea <__vector_5+0x7e>
	{
		b = ICR1;
     1d0:	86 b5       	in	r24, 0x26	; 38
     1d2:	97 b5       	in	r25, 0x27	; 39
     1d4:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <b+0x1>
     1d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <b>
		counter_step = step_3;
     1dc:	83 e0       	ldi	r24, 0x03	; 3
     1de:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <counter_step>
		TCCR1B |= (1<<ICES1)|(1<<CS10)|(1<< ICNC1);//return to rising edge
     1e2:	8e b5       	in	r24, 0x2e	; 46
     1e4:	81 6c       	ori	r24, 0xC1	; 193
     1e6:	8e bd       	out	0x2e, r24	; 46
     1e8:	69 c0       	rjmp	.+210    	; 0x2bc <__vector_5+0x150>
	}
	else if (counter_step == step_3)
     1ea:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <counter_step>
     1ee:	83 30       	cpi	r24, 0x03	; 3
     1f0:	09 f0       	breq	.+2      	; 0x1f4 <__vector_5+0x88>
     1f2:	64 c0       	rjmp	.+200    	; 0x2bc <__vector_5+0x150>
	{
		
		c = ICR1;
     1f4:	86 b5       	in	r24, 0x26	; 38
     1f6:	97 b5       	in	r25, 0x27	; 39
     1f8:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <c+0x1>
     1fc:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <c>
		TCCR1B = 0;
     200:	1e bc       	out	0x2e, r1	; 46
		
		if(a<b && b<c)
     202:	c0 91 7c 00 	lds	r28, 0x007C	; 0x80007c <a>
     206:	d0 91 7d 00 	lds	r29, 0x007D	; 0x80007d <a+0x1>
     20a:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <b>
     20e:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <b+0x1>
     212:	c6 17       	cp	r28, r22
     214:	d7 07       	cpc	r29, r23
     216:	0c f0       	brlt	.+2      	; 0x21a <__vector_5+0xae>
     218:	4b c0       	rjmp	.+150    	; 0x2b0 <__vector_5+0x144>
     21a:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <c>
     21e:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <c+0x1>
     222:	60 17       	cp	r22, r16
     224:	71 07       	cpc	r23, r17
     226:	0c f0       	brlt	.+2      	; 0x22a <__vector_5+0xbe>
     228:	43 c0       	rjmp	.+134    	; 0x2b0 <__vector_5+0x144>
		{
			high=b-a;
			period=c-a;
			duty_cycle =((float)high /(float)period)*100;
			
			if (countSamplingCapture < 10)
     22a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <countSamplingCapture>
     22e:	8a 30       	cpi	r24, 0x0A	; 10
     230:	60 f5       	brcc	.+88     	; 0x28a <__vector_5+0x11e>
			{
				countSamplingCapture++;
     232:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <countSamplingCapture>
     236:	8f 5f       	subi	r24, 0xFF	; 255
     238:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <countSamplingCapture>
				Capture_Sampling += duty_cycle;
     23c:	6c 1b       	sub	r22, r28
     23e:	7d 0b       	sbc	r23, r29
     240:	07 2e       	mov	r0, r23
     242:	00 0c       	add	r0, r0
     244:	88 0b       	sbc	r24, r24
     246:	99 0b       	sbc	r25, r25
     248:	18 d8       	rcall	.-4048   	; 0xfffff27a <__eeprom_end+0xff7ef27a>
     24a:	6b 01       	movw	r12, r22
     24c:	7c 01       	movw	r14, r24
     24e:	b8 01       	movw	r22, r16
     250:	6c 1b       	sub	r22, r28
     252:	7d 0b       	sbc	r23, r29
     254:	07 2e       	mov	r0, r23
     256:	00 0c       	add	r0, r0
     258:	88 0b       	sbc	r24, r24
     25a:	99 0b       	sbc	r25, r25
     25c:	0e d8       	rcall	.-4068   	; 0xfffff27a <__eeprom_end+0xff7ef27a>
     25e:	9b 01       	movw	r18, r22
     260:	ac 01       	movw	r20, r24
     262:	c7 01       	movw	r24, r14
     264:	b6 01       	movw	r22, r12
     266:	73 d7       	rcall	.+3814   	; 0x114e <__divsf3>
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	48 ec       	ldi	r20, 0xC8	; 200
     26e:	52 e4       	ldi	r21, 0x42	; 66
     270:	f9 d8       	rcall	.-3598   	; 0xfffff464 <__eeprom_end+0xff7ef464>
     272:	d5 d7       	rcall	.+4010   	; 0x121e <__fixunssfsi>
     274:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <__data_end>
     278:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <__data_end+0x1>
     27c:	62 0f       	add	r22, r18
     27e:	73 1f       	adc	r23, r19
     280:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <__data_end+0x1>
     284:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <__data_end>
     288:	19 c0       	rjmp	.+50     	; 0x2bc <__vector_5+0x150>
			}
			else if(countSamplingCapture == 10)
     28a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <countSamplingCapture>
     28e:	8a 30       	cpi	r24, 0x0A	; 10
     290:	a9 f4       	brne	.+42     	; 0x2bc <__vector_5+0x150>
			{
				final_dutycycle = Capture_Sampling;
     292:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     296:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x1>
     29a:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <final_dutycycle+0x1>
     29e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <final_dutycycle>
				last_final_dutycycle = final_dutycycle;
				countSamplingCapture = 0;
     2a2:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <countSamplingCapture>
				Capture_Sampling = 0;
     2a6:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__data_end+0x1>
     2aa:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
     2ae:	06 c0       	rjmp	.+12     	; 0x2bc <__vector_5+0x150>
			}
			
}
else
{
	final_dutycycle = 200;
     2b0:	88 ec       	ldi	r24, 0xC8	; 200
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <final_dutycycle+0x1>
     2b8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <final_dutycycle>
}
	}
	
sei();
     2bc:	78 94       	sei
}
     2be:	ff 91       	pop	r31
     2c0:	ef 91       	pop	r30
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	bf 91       	pop	r27
     2c8:	af 91       	pop	r26
     2ca:	9f 91       	pop	r25
     2cc:	8f 91       	pop	r24
     2ce:	7f 91       	pop	r23
     2d0:	6f 91       	pop	r22
     2d2:	5f 91       	pop	r21
     2d4:	4f 91       	pop	r20
     2d6:	3f 91       	pop	r19
     2d8:	2f 91       	pop	r18
     2da:	1f 91       	pop	r17
     2dc:	0f 91       	pop	r16
     2de:	ff 90       	pop	r15
     2e0:	ef 90       	pop	r14
     2e2:	df 90       	pop	r13
     2e4:	cf 90       	pop	r12
     2e6:	0f 90       	pop	r0
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	0f 90       	pop	r0
     2ec:	1f 90       	pop	r1
     2ee:	18 95       	reti

000002f0 <get_dutyCycle>:

uint8_t get_dutyCycle()
{
	if (final_dutycycle == 100)
     2f0:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <final_dutycycle>
     2f4:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <final_dutycycle+0x1>
     2f8:	24 36       	cpi	r18, 0x64	; 100
     2fa:	31 05       	cpc	r19, r1
     2fc:	69 f0       	breq	.+26     	; 0x318 <get_dutyCycle+0x28>
	{
		return 100;
	}
	else if (final_dutycycle == 0)
     2fe:	21 15       	cp	r18, r1
     300:	31 05       	cpc	r19, r1
     302:	61 f0       	breq	.+24     	; 0x31c <get_dutyCycle+0x2c>
	{
		return 0;
	}
	else
	{
		return (final_dutycycle / 10);
     304:	ad ec       	ldi	r26, 0xCD	; 205
     306:	bc ec       	ldi	r27, 0xCC	; 204
     308:	43 d9       	rcall	.-3450   	; 0xfffff590 <__eeprom_end+0xff7ef590>
     30a:	96 95       	lsr	r25
     30c:	87 95       	ror	r24
     30e:	96 95       	lsr	r25
     310:	87 95       	ror	r24
     312:	96 95       	lsr	r25
     314:	87 95       	ror	r24
     316:	08 95       	ret

uint8_t get_dutyCycle()
{
	if (final_dutycycle == 100)
	{
		return 100;
     318:	84 e6       	ldi	r24, 0x64	; 100
     31a:	08 95       	ret
	}
	else if (final_dutycycle == 0)
	{
		return 0;
     31c:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return (final_dutycycle / 10);
	}
}
     31e:	08 95       	ret

00000320 <Device_Init>:
static void fan_ac_handler();


void Device_Init()
{
	Error_Switch_Init();
     320:	be d2       	rcall	.+1404   	; 0x89e <Error_Switch_Init>
	init_Error_Led();
     322:	c9 d1       	rcall	.+914    	; 0x6b6 <init_Error_Led>
	//check sensor select
	if (PINC & (1<<5))
     324:	9d 9b       	sbis	0x13, 5	; 19
     326:	04 c0       	rjmp	.+8      	; 0x330 <Device_Init+0x10>
	{
		Sensor_Permision = 1;
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <Sensor_Permision>
     32e:	02 c0       	rjmp	.+4      	; 0x334 <Device_Init+0x14>
	}else
	{
		Sensor_Permision = 0;
     330:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <Sensor_Permision>
	}
	
	Device.status = NONE_ERROR;
     334:	e7 e9       	ldi	r30, 0x97	; 151
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	11 82       	std	Z+1, r1	; 0x01
	Device.sensor_num = NONE_ERROR;
     33a:	12 82       	std	Z+2, r1	; 0x02
	Device.mode = DEVICE_NORMAL_MODE;
     33c:	10 82       	st	Z, r1
	Set_FanPermission(1);
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	35 d3       	rcall	.+1642   	; 0x9ac <Set_FanPermission>
	sys_fan = get_Systick();
     342:	ba d5       	rcall	.+2932   	; 0xeb8 <get_Systick>
     344:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <sys_fan>
     348:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <sys_fan+0x1>
     34c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <sys_fan+0x2>
     350:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <sys_fan+0x3>
	sys_sensor = get_Systick();
     354:	b1 d5       	rcall	.+2914   	; 0xeb8 <get_Systick>
     356:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <sys_sensor>
     35a:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <sys_sensor+0x1>
     35e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <sys_sensor+0x2>
     362:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <sys_sensor+0x3>
	sys_startTime = get_Systick();
     366:	a8 d5       	rcall	.+2896   	; 0xeb8 <get_Systick>
     368:	60 93 7e 00 	sts	0x007E, r22	; 0x80007e <sys_startTime>
     36c:	70 93 7f 00 	sts	0x007F, r23	; 0x80007f <sys_startTime+0x1>
     370:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <sys_startTime+0x2>
     374:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <sys_startTime+0x3>
     378:	08 95       	ret

0000037a <map_percent_to_step>:
}

 uint8_t map_percent_to_step(uint8_t p)
{
	
	if ((p >= 0)&&(p <= 20))
     37a:	85 31       	cpi	r24, 0x15	; 21
     37c:	78 f0       	brcs	.+30     	; 0x39c <map_percent_to_step+0x22>
	{
		return 4;
	}else if ((p >20)&&(p <= 30))
     37e:	9b ee       	ldi	r25, 0xEB	; 235
     380:	98 0f       	add	r25, r24
     382:	9a 30       	cpi	r25, 0x0A	; 10
     384:	68 f0       	brcs	.+26     	; 0x3a0 <map_percent_to_step+0x26>
	{
		return 3;
	}else if ((p >30)&&(p <= 40))
     386:	91 ee       	ldi	r25, 0xE1	; 225
     388:	98 0f       	add	r25, r24
     38a:	9a 30       	cpi	r25, 0x0A	; 10
     38c:	58 f0       	brcs	.+22     	; 0x3a4 <map_percent_to_step+0x2a>
 uint8_t map_percent_to_step(uint8_t p)
{
	
	if ((p >= 0)&&(p <= 20))
	{
		return 4;
     38e:	97 ed       	ldi	r25, 0xD7	; 215
     390:	98 0f       	add	r25, r24
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	9a 30       	cpi	r25, 0x0A	; 10
     396:	38 f0       	brcs	.+14     	; 0x3a6 <map_percent_to_step+0x2c>
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	08 95       	ret
     39c:	84 e0       	ldi	r24, 0x04	; 4
     39e:	08 95       	ret
	}else if ((p >20)&&(p <= 30))
	{
		return 3;
     3a0:	83 e0       	ldi	r24, 0x03	; 3
     3a2:	08 95       	ret
	}else if ((p >30)&&(p <= 40))
	{
		return 2;
     3a4:	82 e0       	ldi	r24, 0x02	; 2
	}else if ((p >70)&&(p <= 100))
	{
		return 0;
	}
	return 0;
}
     3a6:	08 95       	ret

000003a8 <Device_Loop>:
	sys_fan = get_Systick();
	sys_sensor = get_Systick();
	sys_startTime = get_Systick();
}
void Device_Loop()
{
     3a8:	cf 92       	push	r12
     3aa:	df 92       	push	r13
     3ac:	ef 92       	push	r14
     3ae:	ff 92       	push	r15
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
	Error_Handler();
     3b4:	94 d1       	rcall	.+808    	; 0x6de <Error_Handler>
	switch(Device.mode)
     3b6:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <Device>
     3ba:	88 23       	and	r24, r24
     3bc:	21 f0       	breq	.+8      	; 0x3c6 <Device_Loop+0x1e>
     3be:	81 30       	cpi	r24, 0x01	; 1
     3c0:	09 f4       	brne	.+2      	; 0x3c4 <Device_Loop+0x1c>
     3c2:	41 c1       	rjmp	.+642    	; 0x646 <__stack+0x1e7>
     3c4:	5c c1       	rjmp	.+696    	; 0x67e <__stack+0x21f>
	return 0;
}

static void temp_handler()
{
	if (get_Systick()>= sys_sensor)
     3c6:	78 d5       	rcall	.+2800   	; 0xeb8 <get_Systick>
     3c8:	c0 90 82 00 	lds	r12, 0x0082	; 0x800082 <sys_sensor>
     3cc:	d0 90 83 00 	lds	r13, 0x0083	; 0x800083 <sys_sensor+0x1>
     3d0:	e0 90 84 00 	lds	r14, 0x0084	; 0x800084 <sys_sensor+0x2>
     3d4:	f0 90 85 00 	lds	r15, 0x0085	; 0x800085 <sys_sensor+0x3>
     3d8:	6c 15       	cp	r22, r12
     3da:	7d 05       	cpc	r23, r13
     3dc:	8e 05       	cpc	r24, r14
     3de:	9f 05       	cpc	r25, r15
     3e0:	08 f4       	brcc	.+2      	; 0x3e4 <Device_Loop+0x3c>
     3e2:	c1 c0       	rjmp	.+386    	; 0x566 <__stack+0x107>
	{
		if (Sensor_Permision == 1)
     3e4:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <Sensor_Permision>
     3e8:	81 30       	cpi	r24, 0x01	; 1
     3ea:	09 f0       	breq	.+2      	; 0x3ee <Device_Loop+0x46>
     3ec:	ad c0       	rjmp	.+346    	; 0x548 <__stack+0xe9>
		{
			adc_handler();
     3ee:	da d3       	rcall	.+1972   	; 0xba4 <adc_handler>
			Device.Temp_1 = get_temp_0();
     3f0:	18 d4       	rcall	.+2096   	; 0xc22 <get_temp_0>
     3f2:	c7 e9       	ldi	r28, 0x97	; 151
     3f4:	d0 e0       	ldi	r29, 0x00	; 0
     3f6:	8c 83       	std	Y+4, r24	; 0x04
			Device.Temp_2 = get_temp_1();
     3f8:	7f d4       	rcall	.+2302   	; 0xcf8 <get_temp_1>
     3fa:	8d 83       	std	Y+5, r24	; 0x05
			Device.Temp_3 = get_temp_2();
     3fc:	e8 d4       	rcall	.+2512   	; 0xdce <get_temp_2>
     3fe:	8e 83       	std	Y+6, r24	; 0x06
		
		itoa( Device.Temp_1, buffer, 10);   // convert interger into string (decimal format)
     400:	8c 81       	ldd	r24, Y+4	; 0x04
     402:	4a e0       	ldi	r20, 0x0A	; 10
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	6a e8       	ldi	r22, 0x8A	; 138
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	cd d8       	rcall	.-3686   	; 0xfffff5a8 <__eeprom_end+0xff7ef5a8>
		uart_puts(buffer);        // and transmit string to UART
     40e:	8a e8       	ldi	r24, 0x8A	; 138
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	f8 d5       	rcall	.+3056   	; 0x1004 <uart_puts>
		uart_puts("  ");
     414:	8a e6       	ldi	r24, 0x6A	; 106
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	f5 d5       	rcall	.+3050   	; 0x1004 <uart_puts>
		itoa( Device.Temp_2, buffer, 10);   // convert interger into string (decimal format)
     41a:	8d 81       	ldd	r24, Y+5	; 0x05
     41c:	4a e0       	ldi	r20, 0x0A	; 10
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	6a e8       	ldi	r22, 0x8A	; 138
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	c0 d8       	rcall	.-3712   	; 0xfffff5a8 <__eeprom_end+0xff7ef5a8>
		uart_puts(buffer);        // and transmit string to UART
     428:	8a e8       	ldi	r24, 0x8A	; 138
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	eb d5       	rcall	.+3030   	; 0x1004 <uart_puts>
		uart_puts("  ");
     42e:	8a e6       	ldi	r24, 0x6A	; 106
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	e8 d5       	rcall	.+3024   	; 0x1004 <uart_puts>
		itoa( Device.Temp_3, buffer, 10);   // convert interger into string (decimal format)
     434:	8e 81       	ldd	r24, Y+6	; 0x06
     436:	4a e0       	ldi	r20, 0x0A	; 10
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	6a e8       	ldi	r22, 0x8A	; 138
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	b3 d8       	rcall	.-3738   	; 0xfffff5a8 <__eeprom_end+0xff7ef5a8>
		uart_puts(buffer);        // and transmit string to UART
     442:	8a e8       	ldi	r24, 0x8A	; 138
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	de d5       	rcall	.+3004   	; 0x1004 <uart_puts>
		uart_puts("  ");
     448:	8a e6       	ldi	r24, 0x6A	; 106
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	db d5       	rcall	.+2998   	; 0x1004 <uart_puts>
		uart_puts("         ");
     44e:	83 e6       	ldi	r24, 0x63	; 99
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	d8 d5       	rcall	.+2992   	; 0x1004 <uart_puts>
			if (((Device.Temp_1 == 0) ||(Device.Temp_2 == 0)||( Device.Temp_3 == 0))&&(sys_startTime + DELAY_TIME_ERROR_CHECK < get_Systick()))
     454:	8c 81       	ldd	r24, Y+4	; 0x04
     456:	88 23       	and	r24, r24
     458:	41 f0       	breq	.+16     	; 0x46a <__stack+0xb>
     45a:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <Device+0x5>
     45e:	88 23       	and	r24, r24
     460:	21 f0       	breq	.+8      	; 0x46a <__stack+0xb>
     462:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Device+0x6>
     466:	81 11       	cpse	r24, r1
     468:	33 c0       	rjmp	.+102    	; 0x4d0 <__stack+0x71>
     46a:	c0 90 7e 00 	lds	r12, 0x007E	; 0x80007e <sys_startTime>
     46e:	d0 90 7f 00 	lds	r13, 0x007F	; 0x80007f <sys_startTime+0x1>
     472:	e0 90 80 00 	lds	r14, 0x0080	; 0x800080 <sys_startTime+0x2>
     476:	f0 90 81 00 	lds	r15, 0x0081	; 0x800081 <sys_startTime+0x3>
     47a:	1e d5       	rcall	.+2620   	; 0xeb8 <get_Systick>
     47c:	20 e3       	ldi	r18, 0x30	; 48
     47e:	c2 0e       	add	r12, r18
     480:	25 e7       	ldi	r18, 0x75	; 117
     482:	d2 1e       	adc	r13, r18
     484:	e1 1c       	adc	r14, r1
     486:	f1 1c       	adc	r15, r1
     488:	c6 16       	cp	r12, r22
     48a:	d7 06       	cpc	r13, r23
     48c:	e8 06       	cpc	r14, r24
     48e:	f9 06       	cpc	r15, r25
     490:	f8 f4       	brcc	.+62     	; 0x4d0 <__stack+0x71>
			{
				error_detect = 1;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <error_detect>
				Device.status = SENSOR_FAILURE;
     498:	e7 e9       	ldi	r30, 0x97	; 151
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	83 e0       	ldi	r24, 0x03	; 3
     49e:	81 83       	std	Z+1, r24	; 0x01
				if (Device.Temp_1 == 0)
     4a0:	84 81       	ldd	r24, Z+4	; 0x04
     4a2:	81 11       	cpse	r24, r1
     4a4:	04 c0       	rjmp	.+8      	; 0x4ae <__stack+0x4f>
				{
					Device.sensor_num = SENSOR_1_ERROR;
     4a6:	84 e0       	ldi	r24, 0x04	; 4
     4a8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <Device+0x2>
     4ac:	15 c0       	rjmp	.+42     	; 0x4d8 <__stack+0x79>
				}else if (Device.Temp_2 == 0)
     4ae:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <Device+0x5>
     4b2:	91 11       	cpse	r25, r1
     4b4:	06 c0       	rjmp	.+12     	; 0x4c2 <__stack+0x63>
				{
					Device.sensor_num = SENSOR_2_ERROR;
     4b6:	95 e0       	ldi	r25, 0x05	; 5
     4b8:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <Device+0x2>
				}else if (Device.Temp_3 == 0)
				{
					Device.sensor_num = SENSOR_3_ERROR;
				}
			}
			if (((Device.Temp_1 >= OVER_TEMP) ||(Device.Temp_2 >= OVER_TEMP)|| (Device.Temp_3 >=OVER_TEMP))&&(sys_startTime + DELAY_TIME_ERROR_CHECK < get_Systick()))
     4bc:	80 35       	cpi	r24, 0x50	; 80
     4be:	80 f0       	brcs	.+32     	; 0x4e0 <__stack+0x81>
     4c0:	13 c0       	rjmp	.+38     	; 0x4e8 <__stack+0x89>
				{
					Device.sensor_num = SENSOR_1_ERROR;
				}else if (Device.Temp_2 == 0)
				{
					Device.sensor_num = SENSOR_2_ERROR;
				}else if (Device.Temp_3 == 0)
     4c2:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Device+0x6>
     4c6:	81 11       	cpse	r24, r1
     4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <__stack+0x71>
				{
					Device.sensor_num = SENSOR_3_ERROR;
     4ca:	86 e0       	ldi	r24, 0x06	; 6
     4cc:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <Device+0x2>
				}
			}
			if (((Device.Temp_1 >= OVER_TEMP) ||(Device.Temp_2 >= OVER_TEMP)|| (Device.Temp_3 >=OVER_TEMP))&&(sys_startTime + DELAY_TIME_ERROR_CHECK < get_Systick()))
     4d0:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <Device+0x4>
     4d4:	80 35       	cpi	r24, 0x50	; 80
     4d6:	40 f4       	brcc	.+16     	; 0x4e8 <__stack+0x89>
     4d8:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <Device+0x5>
     4dc:	80 35       	cpi	r24, 0x50	; 80
     4de:	20 f4       	brcc	.+8      	; 0x4e8 <__stack+0x89>
     4e0:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Device+0x6>
     4e4:	80 35       	cpi	r24, 0x50	; 80
     4e6:	80 f1       	brcs	.+96     	; 0x548 <__stack+0xe9>
     4e8:	c0 90 7e 00 	lds	r12, 0x007E	; 0x80007e <sys_startTime>
     4ec:	d0 90 7f 00 	lds	r13, 0x007F	; 0x80007f <sys_startTime+0x1>
     4f0:	e0 90 80 00 	lds	r14, 0x0080	; 0x800080 <sys_startTime+0x2>
     4f4:	f0 90 81 00 	lds	r15, 0x0081	; 0x800081 <sys_startTime+0x3>
     4f8:	df d4       	rcall	.+2494   	; 0xeb8 <get_Systick>
     4fa:	20 e3       	ldi	r18, 0x30	; 48
     4fc:	c2 0e       	add	r12, r18
     4fe:	25 e7       	ldi	r18, 0x75	; 117
     500:	d2 1e       	adc	r13, r18
     502:	e1 1c       	adc	r14, r1
     504:	f1 1c       	adc	r15, r1
     506:	c6 16       	cp	r12, r22
     508:	d7 06       	cpc	r13, r23
     50a:	e8 06       	cpc	r14, r24
     50c:	f9 06       	cpc	r15, r25
     50e:	e0 f4       	brcc	.+56     	; 0x548 <__stack+0xe9>
			{
				error_detect = 1;
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <error_detect>
				Device.status = OVER_TEMP_ERROR;
     516:	e7 e9       	ldi	r30, 0x97	; 151
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	81 83       	std	Z+1, r24	; 0x01
				if (Device.Temp_1 >= OVER_TEMP)
     51c:	84 81       	ldd	r24, Z+4	; 0x04
     51e:	80 35       	cpi	r24, 0x50	; 80
     520:	20 f0       	brcs	.+8      	; 0x52a <__stack+0xcb>
				{
					Device.sensor_num = SENSOR_1_ERROR;
     522:	84 e0       	ldi	r24, 0x04	; 4
     524:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <Device+0x2>
     528:	0f c0       	rjmp	.+30     	; 0x548 <__stack+0xe9>
				}else if (Device.Temp_2 >= OVER_TEMP)
     52a:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <Device+0x5>
     52e:	80 35       	cpi	r24, 0x50	; 80
     530:	20 f0       	brcs	.+8      	; 0x53a <__stack+0xdb>
				{
					Device.sensor_num = SENSOR_2_ERROR;
     532:	85 e0       	ldi	r24, 0x05	; 5
     534:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <Device+0x2>
     538:	07 c0       	rjmp	.+14     	; 0x548 <__stack+0xe9>
				}else if (Device.Temp_3 >= OVER_TEMP)
     53a:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Device+0x6>
     53e:	80 35       	cpi	r24, 0x50	; 80
     540:	18 f0       	brcs	.+6      	; 0x548 <__stack+0xe9>
				{
					Device.sensor_num = SENSOR_3_ERROR;
     542:	86 e0       	ldi	r24, 0x06	; 6
     544:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <Device+0x2>
				}
				
			}
			
		}
		sys_sensor = get_Systick() + 500;
     548:	b7 d4       	rcall	.+2414   	; 0xeb8 <get_Systick>
     54a:	dc 01       	movw	r26, r24
     54c:	cb 01       	movw	r24, r22
     54e:	8c 50       	subi	r24, 0x0C	; 12
     550:	9e 4f       	sbci	r25, 0xFE	; 254
     552:	af 4f       	sbci	r26, 0xFF	; 255
     554:	bf 4f       	sbci	r27, 0xFF	; 255
     556:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <sys_sensor>
     55a:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <sys_sensor+0x1>
     55e:	a0 93 84 00 	sts	0x0084, r26	; 0x800084 <sys_sensor+0x2>
     562:	b0 93 85 00 	sts	0x0085, r27	; 0x800085 <sys_sensor+0x3>
	}
	
}
static void fan_ac_handler()
{
	if (get_Systick()>= sys_fan)
     566:	a8 d4       	rcall	.+2384   	; 0xeb8 <get_Systick>
     568:	c0 90 86 00 	lds	r12, 0x0086	; 0x800086 <sys_fan>
     56c:	d0 90 87 00 	lds	r13, 0x0087	; 0x800087 <sys_fan+0x1>
     570:	e0 90 88 00 	lds	r14, 0x0088	; 0x800088 <sys_fan+0x2>
     574:	f0 90 89 00 	lds	r15, 0x0089	; 0x800089 <sys_fan+0x3>
     578:	6c 15       	cp	r22, r12
     57a:	7d 05       	cpc	r23, r13
     57c:	8e 05       	cpc	r24, r14
     57e:	9f 05       	cpc	r25, r15
     580:	08 f4       	brcc	.+2      	; 0x584 <__stack+0x125>
     582:	40 c0       	rjmp	.+128    	; 0x604 <__stack+0x1a5>
	{
		Loop_Capture();
     584:	b0 dd       	rcall	.-1184   	; 0xe6 <Loop_Capture>
		Device.DutyCycle = get_dutyCycle();
     586:	b4 de       	rcall	.-664    	; 0x2f0 <get_dutyCycle>
     588:	c7 e9       	ldi	r28, 0x97	; 151
     58a:	d0 e0       	ldi	r29, 0x00	; 0
     58c:	88 87       	std	Y+8, r24	; 0x08
			itoa( Device.DutyCycle, buffer, 10);   // convert interger into string (decimal format)
     58e:	4a e0       	ldi	r20, 0x0A	; 10
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	6a e8       	ldi	r22, 0x8A	; 138
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	07 d8       	rcall	.-4082   	; 0xfffff5a8 <__eeprom_end+0xff7ef5a8>
			uart_puts(buffer);        // and transmit string to UART
     59a:	8a e8       	ldi	r24, 0x8A	; 138
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	32 d5       	rcall	.+2660   	; 0x1004 <uart_puts>
			uart_puts("           ");
     5a0:	81 e6       	ldi	r24, 0x61	; 97
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	2f d5       	rcall	.+2654   	; 0x1004 <uart_puts>
		Set_FanSpeed(map_percent_to_step(Device.DutyCycle));
     5a6:	88 85       	ldd	r24, Y+8	; 0x08
     5a8:	e8 de       	rcall	.-560    	; 0x37a <map_percent_to_step>
     5aa:	fd d1       	rcall	.+1018   	; 0x9a6 <Set_FanSpeed>
		if ((Device.DutyCycle ==0 )&&(sys_startTime + DELAY_TIME_ERROR_CHECK < get_Systick()))
     5ac:	88 85       	ldd	r24, Y+8	; 0x08
     5ae:	81 11       	cpse	r24, r1
     5b0:	1a c0       	rjmp	.+52     	; 0x5e6 <__stack+0x187>
     5b2:	c0 90 7e 00 	lds	r12, 0x007E	; 0x80007e <sys_startTime>
     5b6:	d0 90 7f 00 	lds	r13, 0x007F	; 0x80007f <sys_startTime+0x1>
     5ba:	e0 90 80 00 	lds	r14, 0x0080	; 0x800080 <sys_startTime+0x2>
     5be:	f0 90 81 00 	lds	r15, 0x0081	; 0x800081 <sys_startTime+0x3>
     5c2:	7a d4       	rcall	.+2292   	; 0xeb8 <get_Systick>
     5c4:	20 e3       	ldi	r18, 0x30	; 48
     5c6:	c2 0e       	add	r12, r18
     5c8:	25 e7       	ldi	r18, 0x75	; 117
     5ca:	d2 1e       	adc	r13, r18
     5cc:	e1 1c       	adc	r14, r1
     5ce:	f1 1c       	adc	r15, r1
     5d0:	c6 16       	cp	r12, r22
     5d2:	d7 06       	cpc	r13, r23
     5d4:	e8 06       	cpc	r14, r24
     5d6:	f9 06       	cpc	r15, r25
     5d8:	30 f4       	brcc	.+12     	; 0x5e6 <__stack+0x187>
		{
			error_detect = 1;
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <error_detect>
			Device.status = PWM_BROKEN_ERROR;
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <Device+0x1>
		}
		sys_fan = get_Systick() + 1000;
     5e6:	68 d4       	rcall	.+2256   	; 0xeb8 <get_Systick>
     5e8:	dc 01       	movw	r26, r24
     5ea:	cb 01       	movw	r24, r22
     5ec:	88 51       	subi	r24, 0x18	; 24
     5ee:	9c 4f       	sbci	r25, 0xFC	; 252
     5f0:	af 4f       	sbci	r26, 0xFF	; 255
     5f2:	bf 4f       	sbci	r27, 0xFF	; 255
     5f4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <sys_fan>
     5f8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <sys_fan+0x1>
     5fc:	a0 93 88 00 	sts	0x0088, r26	; 0x800088 <sys_fan+0x2>
     600:	b0 93 89 00 	sts	0x0089, r27	; 0x800089 <sys_fan+0x3>
	switch(Device.mode)
	{
		case DEVICE_NORMAL_MODE:
		temp_handler();
		fan_ac_handler();
		Relay_1_Target(1);
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	d8 d1       	rcall	.+944    	; 0x9b8 <Relay_1_Target>
		if (error_detect == 1)
     608:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <error_detect>
     60c:	81 30       	cpi	r24, 0x01	; 1
     60e:	b9 f5       	brne	.+110    	; 0x67e <__stack+0x21f>
		{
			error_detect =0;
     610:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <error_detect>
			if (count_error >= 5)
     614:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <count_error>
     618:	85 30       	cpi	r24, 0x05	; 5
     61a:	88 f0       	brcs	.+34     	; 0x63e <__stack+0x1df>
			{
				Relay_1_Target(0);
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	cc d1       	rcall	.+920    	; 0x9b8 <Relay_1_Target>
				if (Device.status == OVER_TEMP_ERROR)
     620:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <Device+0x1>
     624:	81 30       	cpi	r24, 0x01	; 1
     626:	19 f4       	brne	.+6      	; 0x62e <__stack+0x1cf>
				{
					Set_FanSpeed(0);
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	bd d1       	rcall	.+890    	; 0x9a6 <Set_FanSpeed>
     62c:	02 c0       	rjmp	.+4      	; 0x632 <__stack+0x1d3>
				}else
				{
					Set_FanPermission(0);
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	bd d1       	rcall	.+890    	; 0x9ac <Set_FanPermission>
				}
				count_error = 0;
     632:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <count_error>
				Device.mode = DEVICE_ERROR_MODE;
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <Device>
     63c:	20 c0       	rjmp	.+64     	; 0x67e <__stack+0x21f>
			}else
			{
				count_error +=1;
     63e:	8f 5f       	subi	r24, 0xFF	; 255
     640:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <count_error>
     644:	1c c0       	rjmp	.+56     	; 0x67e <__stack+0x21f>
			
		}
		break;
		case DEVICE_ERROR_MODE:
		
		  itoa( Device.status, buffer, 10);   // convert interger into string (decimal format)
     646:	c7 e9       	ldi	r28, 0x97	; 151
     648:	d0 e0       	ldi	r29, 0x00	; 0
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	4a e0       	ldi	r20, 0x0A	; 10
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	6a e8       	ldi	r22, 0x8A	; 138
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	a8 d7       	rcall	.+3920   	; 0x15a8 <itoa>
		  uart_puts(buffer);        // and transmit string to UART
     658:	8a e8       	ldi	r24, 0x8A	; 138
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	d3 d4       	rcall	.+2470   	; 0x1004 <uart_puts>
		    uart_puts("  ");     
     65e:	8a e6       	ldi	r24, 0x6A	; 106
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	d0 d4       	rcall	.+2464   	; 0x1004 <uart_puts>
		    itoa( Device.sensor_num, buffer, 10);   // convert interger into string (decimal format)
     664:	8a 81       	ldd	r24, Y+2	; 0x02
     666:	4a e0       	ldi	r20, 0x0A	; 10
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	6a e8       	ldi	r22, 0x8A	; 138
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	9b d7       	rcall	.+3894   	; 0x15a8 <itoa>
		    uart_puts(buffer);  
     672:	8a e8       	ldi	r24, 0x8A	; 138
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	c6 d4       	rcall	.+2444   	; 0x1004 <uart_puts>
			  uart_puts("     ");           // and transmit string to UART
     678:	87 e6       	ldi	r24, 0x67	; 103
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	c3 d4       	rcall	.+2438   	; 0x1004 <uart_puts>
			  
		
		break;
	}
}
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	df 90       	pop	r13
     688:	cf 90       	pop	r12
     68a:	08 95       	ret

0000068c <Error_Clear>:
		sys_fan = get_Systick() + 1000;
	}
}
void Error_Clear()
{
	Set_FanPermission(1);
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	8e d1       	rcall	.+796    	; 0x9ac <Set_FanPermission>
	error_detect = 0;
     690:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <error_detect>
	sys_startTime = get_Systick();
     694:	11 d4       	rcall	.+2082   	; 0xeb8 <get_Systick>
     696:	60 93 7e 00 	sts	0x007E, r22	; 0x80007e <sys_startTime>
     69a:	70 93 7f 00 	sts	0x007F, r23	; 0x80007f <sys_startTime+0x1>
     69e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <sys_startTime+0x2>
     6a2:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <sys_startTime+0x3>
	Device.status = NONE_ERROR;
     6a6:	e7 e9       	ldi	r30, 0x97	; 151
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	11 82       	std	Z+1, r1	; 0x01
	Device.Temp_1 = 0;
     6ac:	14 82       	std	Z+4, r1	; 0x04
	Device.Temp_2 = 0;
     6ae:	15 82       	std	Z+5, r1	; 0x05
	Device.Temp_3 = 0;
     6b0:	16 82       	std	Z+6, r1	; 0x06
	Device.mode = DEVICE_NORMAL_MODE;
     6b2:	10 82       	st	Z, r1
     6b4:	08 95       	ret

000006b6 <init_Error_Led>:

void Error_Led_Target(uint8_t mode);

void init_Error_Led()
{
	Error_Led_DDR |= (1<<Error_Led_Posion);
     6b6:	8c 9a       	sbi	0x11, 4	; 17
	Error_Led_PORT &= ~(1<<Error_Led_Posion);
     6b8:	94 98       	cbi	0x12, 4	; 18
	Led_sys = get_Systick();
     6ba:	fe d3       	rcall	.+2044   	; 0xeb8 <get_Systick>
     6bc:	60 93 a1 00 	sts	0x00A1, r22	; 0x8000a1 <Led_sys>
     6c0:	70 93 a2 00 	sts	0x00A2, r23	; 0x8000a2 <Led_sys+0x1>
     6c4:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <Led_sys+0x2>
     6c8:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <Led_sys+0x3>
	counter = start;
     6cc:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <counter>
     6d0:	08 95       	ret

000006d2 <Error_Led_Target>:
		break;
	}
}
void Error_Led_Target(uint8_t mode)
{
	if (mode == ON)
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	11 f4       	brne	.+4      	; 0x6da <Error_Led_Target+0x8>
	{
		Error_Led_PORT |= (1<<Error_Led_Posion);
     6d6:	94 9a       	sbi	0x12, 4	; 18
     6d8:	08 95       	ret
	}
	else
	{
		Error_Led_PORT &= ~(1<<Error_Led_Posion);
     6da:	94 98       	cbi	0x12, 4	; 18
     6dc:	08 95       	ret

000006de <Error_Handler>:
	Led_sys = get_Systick();
	counter = start;
}

void Error_Handler()
{
     6de:	0f 93       	push	r16
     6e0:	1f 93       	push	r17
	switch(Device.status)
     6e2:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <Device+0x1>
     6e6:	81 30       	cpi	r24, 0x01	; 1
     6e8:	09 f4       	brne	.+2      	; 0x6ec <Error_Handler+0xe>
     6ea:	3f c0       	rjmp	.+126    	; 0x76a <Error_Handler+0x8c>
     6ec:	30 f0       	brcs	.+12     	; 0x6fa <Error_Handler+0x1c>
     6ee:	82 30       	cpi	r24, 0x02	; 2
     6f0:	39 f0       	breq	.+14     	; 0x700 <Error_Handler+0x22>
     6f2:	83 30       	cpi	r24, 0x03	; 3
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <Error_Handler+0x1a>
     6f6:	81 c0       	rjmp	.+258    	; 0x7fa <Error_Handler+0x11c>
     6f8:	cf c0       	rjmp	.+414    	; 0x898 <Error_Handler+0x1ba>
	{
		case NONE_ERROR:
	
			Error_Led_Target(ON);
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	ea df       	rcall	.-44     	; 0x6d2 <Error_Led_Target>
		break;
     6fe:	cc c0       	rjmp	.+408    	; 0x898 <Error_Handler+0x1ba>
		case PWM_BROKEN_ERROR:
			if (get_Systick() >= Led_sys)
     700:	db d3       	rcall	.+1974   	; 0xeb8 <get_Systick>
     702:	00 91 a1 00 	lds	r16, 0x00A1	; 0x8000a1 <Led_sys>
     706:	10 91 a2 00 	lds	r17, 0x00A2	; 0x8000a2 <Led_sys+0x1>
     70a:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <Led_sys+0x2>
     70e:	30 91 a4 00 	lds	r19, 0x00A4	; 0x8000a4 <Led_sys+0x3>
     712:	60 17       	cp	r22, r16
     714:	71 07       	cpc	r23, r17
     716:	82 07       	cpc	r24, r18
     718:	93 07       	cpc	r25, r19
     71a:	08 f4       	brcc	.+2      	; 0x71e <Error_Handler+0x40>
     71c:	bd c0       	rjmp	.+378    	; 0x898 <Error_Handler+0x1ba>
			{
				switch(counter)
     71e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <counter>
     722:	83 30       	cpi	r24, 0x03	; 3
     724:	51 f0       	breq	.+20     	; 0x73a <Error_Handler+0x5c>
     726:	86 30       	cpi	r24, 0x06	; 6
     728:	71 f0       	breq	.+28     	; 0x746 <Error_Handler+0x68>
     72a:	81 11       	cpse	r24, r1
     72c:	0e c0       	rjmp	.+28     	; 0x74a <Error_Handler+0x6c>
				{
					case start:
					Error_Led_Target(ON);
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	d0 df       	rcall	.-96     	; 0x6d2 <Error_Led_Target>
					counter = stop;
     732:	83 e0       	ldi	r24, 0x03	; 3
     734:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <counter>
					break;
     738:	08 c0       	rjmp	.+16     	; 0x74a <Error_Handler+0x6c>
					case stop:
					Error_Led_Target(OFF);
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	ca df       	rcall	.-108    	; 0x6d2 <Error_Led_Target>
					counter =delay;
     73e:	86 e0       	ldi	r24, 0x06	; 6
     740:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <counter>
					break;
     744:	02 c0       	rjmp	.+4      	; 0x74a <Error_Handler+0x6c>
					case delay:
					counter = start;
     746:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <counter>
					break;
				}
				
				Led_sys = get_Systick() + 1000;
     74a:	b6 d3       	rcall	.+1900   	; 0xeb8 <get_Systick>
     74c:	dc 01       	movw	r26, r24
     74e:	cb 01       	movw	r24, r22
     750:	88 51       	subi	r24, 0x18	; 24
     752:	9c 4f       	sbci	r25, 0xFC	; 252
     754:	af 4f       	sbci	r26, 0xFF	; 255
     756:	bf 4f       	sbci	r27, 0xFF	; 255
     758:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <Led_sys>
     75c:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <Led_sys+0x1>
     760:	a0 93 a3 00 	sts	0x00A3, r26	; 0x8000a3 <Led_sys+0x2>
     764:	b0 93 a4 00 	sts	0x00A4, r27	; 0x8000a4 <Led_sys+0x3>
     768:	97 c0       	rjmp	.+302    	; 0x898 <Error_Handler+0x1ba>
			}
		break;
		case OVER_TEMP_ERROR:
			if (get_Systick() >= Led_sys)
     76a:	a6 d3       	rcall	.+1868   	; 0xeb8 <get_Systick>
     76c:	00 91 a1 00 	lds	r16, 0x00A1	; 0x8000a1 <Led_sys>
     770:	10 91 a2 00 	lds	r17, 0x00A2	; 0x8000a2 <Led_sys+0x1>
     774:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <Led_sys+0x2>
     778:	30 91 a4 00 	lds	r19, 0x00A4	; 0x8000a4 <Led_sys+0x3>
     77c:	60 17       	cp	r22, r16
     77e:	71 07       	cpc	r23, r17
     780:	82 07       	cpc	r24, r18
     782:	93 07       	cpc	r25, r19
     784:	08 f4       	brcc	.+2      	; 0x788 <Error_Handler+0xaa>
     786:	88 c0       	rjmp	.+272    	; 0x898 <Error_Handler+0x1ba>
			{
				switch(counter)
     788:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <counter>
     78c:	83 30       	cpi	r24, 0x03	; 3
     78e:	89 f0       	breq	.+34     	; 0x7b2 <Error_Handler+0xd4>
     790:	28 f4       	brcc	.+10     	; 0x79c <Error_Handler+0xbe>
     792:	88 23       	and	r24, r24
     794:	41 f0       	breq	.+16     	; 0x7a6 <Error_Handler+0xc8>
     796:	81 30       	cpi	r24, 0x01	; 1
     798:	91 f0       	breq	.+36     	; 0x7be <Error_Handler+0xe0>
     79a:	1f c0       	rjmp	.+62     	; 0x7da <Error_Handler+0xfc>
     79c:	84 30       	cpi	r24, 0x04	; 4
     79e:	a9 f0       	breq	.+42     	; 0x7ca <Error_Handler+0xec>
     7a0:	86 30       	cpi	r24, 0x06	; 6
     7a2:	c9 f0       	breq	.+50     	; 0x7d6 <Error_Handler+0xf8>
     7a4:	1a c0       	rjmp	.+52     	; 0x7da <Error_Handler+0xfc>
				{
					case start:
					Error_Led_Target(ON);
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	94 df       	rcall	.-216    	; 0x6d2 <Error_Led_Target>
					counter = stop;
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <counter>
					break;
     7b0:	14 c0       	rjmp	.+40     	; 0x7da <Error_Handler+0xfc>
					case stop:
					Error_Led_Target(OFF);
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	8e df       	rcall	.-228    	; 0x6d2 <Error_Led_Target>
					counter = start_2;
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <counter>
					break;
     7bc:	0e c0       	rjmp	.+28     	; 0x7da <Error_Handler+0xfc>
					case start_2:
					Error_Led_Target(ON);
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	88 df       	rcall	.-240    	; 0x6d2 <Error_Led_Target>
					counter = stop_2;
     7c2:	84 e0       	ldi	r24, 0x04	; 4
     7c4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <counter>
					break;
     7c8:	08 c0       	rjmp	.+16     	; 0x7da <Error_Handler+0xfc>
					case stop_2:
					Error_Led_Target(OFF);
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	82 df       	rcall	.-252    	; 0x6d2 <Error_Led_Target>
					counter = delay;
     7ce:	86 e0       	ldi	r24, 0x06	; 6
     7d0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <counter>
					break;
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <Error_Handler+0xfc>
					case delay:
					counter = start;
     7d6:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <counter>
					break;
				}
				Led_sys = get_Systick() + 1000;
     7da:	6e d3       	rcall	.+1756   	; 0xeb8 <get_Systick>
     7dc:	dc 01       	movw	r26, r24
     7de:	cb 01       	movw	r24, r22
     7e0:	88 51       	subi	r24, 0x18	; 24
     7e2:	9c 4f       	sbci	r25, 0xFC	; 252
     7e4:	af 4f       	sbci	r26, 0xFF	; 255
     7e6:	bf 4f       	sbci	r27, 0xFF	; 255
     7e8:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <Led_sys>
     7ec:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <Led_sys+0x1>
     7f0:	a0 93 a3 00 	sts	0x00A3, r26	; 0x8000a3 <Led_sys+0x2>
     7f4:	b0 93 a4 00 	sts	0x00A4, r27	; 0x8000a4 <Led_sys+0x3>
     7f8:	4f c0       	rjmp	.+158    	; 0x898 <Error_Handler+0x1ba>
			}
		break;
		
		case SENSOR_FAILURE:
			if (get_Systick() >= Led_sys)
     7fa:	5e d3       	rcall	.+1724   	; 0xeb8 <get_Systick>
     7fc:	00 91 a1 00 	lds	r16, 0x00A1	; 0x8000a1 <Led_sys>
     800:	10 91 a2 00 	lds	r17, 0x00A2	; 0x8000a2 <Led_sys+0x1>
     804:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <Led_sys+0x2>
     808:	30 91 a4 00 	lds	r19, 0x00A4	; 0x8000a4 <Led_sys+0x3>
     80c:	60 17       	cp	r22, r16
     80e:	71 07       	cpc	r23, r17
     810:	82 07       	cpc	r24, r18
     812:	93 07       	cpc	r25, r19
     814:	08 f4       	brcc	.+2      	; 0x818 <Error_Handler+0x13a>
     816:	40 c0       	rjmp	.+128    	; 0x898 <Error_Handler+0x1ba>
			{
				switch(counter)
     818:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <counter>
     81c:	8e 2f       	mov	r24, r30
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	87 30       	cpi	r24, 0x07	; 7
     822:	91 05       	cpc	r25, r1
     824:	50 f5       	brcc	.+84     	; 0x87a <Error_Handler+0x19c>
     826:	fc 01       	movw	r30, r24
     828:	ed 5e       	subi	r30, 0xED	; 237
     82a:	ff 4f       	sbci	r31, 0xFF	; 255
     82c:	09 94       	ijmp
				{
					case start:
					Error_Led_Target(ON);
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	50 df       	rcall	.-352    	; 0x6d2 <Error_Led_Target>
					counter = stop;
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <counter>
					break;
     838:	20 c0       	rjmp	.+64     	; 0x87a <Error_Handler+0x19c>
					case stop:
					Error_Led_Target(OFF);
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	4a df       	rcall	.-364    	; 0x6d2 <Error_Led_Target>
					counter = start_2;
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <counter>
					break;
     844:	1a c0       	rjmp	.+52     	; 0x87a <Error_Handler+0x19c>
					case start_2:
					Error_Led_Target(ON);
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	44 df       	rcall	.-376    	; 0x6d2 <Error_Led_Target>
					counter = stop_2;
     84a:	84 e0       	ldi	r24, 0x04	; 4
     84c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <counter>
					break;
     850:	14 c0       	rjmp	.+40     	; 0x87a <Error_Handler+0x19c>
					case stop_2:
					Error_Led_Target(OFF);
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	3e df       	rcall	.-388    	; 0x6d2 <Error_Led_Target>
					counter = start_3;
     856:	82 e0       	ldi	r24, 0x02	; 2
     858:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <counter>
					break;
     85c:	0e c0       	rjmp	.+28     	; 0x87a <Error_Handler+0x19c>
					case start_3:
					Error_Led_Target(ON);
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	38 df       	rcall	.-400    	; 0x6d2 <Error_Led_Target>
					counter = stop_3;
     862:	85 e0       	ldi	r24, 0x05	; 5
     864:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <counter>
					break;
     868:	08 c0       	rjmp	.+16     	; 0x87a <Error_Handler+0x19c>
					case stop_3:
					Error_Led_Target(OFF);
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	32 df       	rcall	.-412    	; 0x6d2 <Error_Led_Target>
					counter = delay;
     86e:	86 e0       	ldi	r24, 0x06	; 6
     870:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <counter>
					break;
     874:	02 c0       	rjmp	.+4      	; 0x87a <Error_Handler+0x19c>
					case delay:
					counter = start;
     876:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <counter>
					break;
				}
				Led_sys = get_Systick() + 1000;
     87a:	1e d3       	rcall	.+1596   	; 0xeb8 <get_Systick>
     87c:	dc 01       	movw	r26, r24
     87e:	cb 01       	movw	r24, r22
     880:	88 51       	subi	r24, 0x18	; 24
     882:	9c 4f       	sbci	r25, 0xFC	; 252
     884:	af 4f       	sbci	r26, 0xFF	; 255
     886:	bf 4f       	sbci	r27, 0xFF	; 255
     888:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <Led_sys>
     88c:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <Led_sys+0x1>
     890:	a0 93 a3 00 	sts	0x00A3, r26	; 0x8000a3 <Led_sys+0x2>
     894:	b0 93 a4 00 	sts	0x00A4, r27	; 0x8000a4 <Led_sys+0x3>
			}
			
		break;
	}
}
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	08 95       	ret

0000089e <Error_Switch_Init>:
#include "../Motor_Controller/TriakRun.h"

void Error_Switch_Init()
{
	
	switch_DDR &= ~(1<<switch_Position);
     89e:	8b 98       	cbi	0x11, 3	; 17
	Enable_Interrupt_SWITCH |= (1<<int_Mode_Switch);
     8a0:	8b b7       	in	r24, 0x3b	; 59
     8a2:	80 68       	ori	r24, 0x80	; 128
     8a4:	8b bf       	out	0x3b, r24	; 59
	EXT_INT_STATUS_REGISTER_SWITCH |= (1<<ISC11)|(1<<ISC10);
     8a6:	85 b7       	in	r24, 0x35	; 53
     8a8:	8c 60       	ori	r24, 0x0C	; 12
     8aa:	85 bf       	out	0x35, r24	; 53
	sei();
     8ac:	78 94       	sei
     8ae:	08 95       	ret

000008b0 <__vector_2>:
}

ISR (isr_mode_Switch)
{
     8b0:	1f 92       	push	r1
     8b2:	0f 92       	push	r0
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	0f 92       	push	r0
     8b8:	11 24       	eor	r1, r1
     8ba:	2f 93       	push	r18
     8bc:	3f 93       	push	r19
     8be:	4f 93       	push	r20
     8c0:	5f 93       	push	r21
     8c2:	6f 93       	push	r22
     8c4:	7f 93       	push	r23
     8c6:	8f 93       	push	r24
     8c8:	9f 93       	push	r25
     8ca:	af 93       	push	r26
     8cc:	bf 93       	push	r27
     8ce:	ef 93       	push	r30
     8d0:	ff 93       	push	r31
	Error_Clear();
     8d2:	dc de       	rcall	.-584    	; 0x68c <Error_Clear>
}
     8d4:	ff 91       	pop	r31
     8d6:	ef 91       	pop	r30
     8d8:	bf 91       	pop	r27
     8da:	af 91       	pop	r26
     8dc:	9f 91       	pop	r25
     8de:	8f 91       	pop	r24
     8e0:	7f 91       	pop	r23
     8e2:	6f 91       	pop	r22
     8e4:	5f 91       	pop	r21
     8e6:	4f 91       	pop	r20
     8e8:	3f 91       	pop	r19
     8ea:	2f 91       	pop	r18
     8ec:	0f 90       	pop	r0
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	0f 90       	pop	r0
     8f2:	1f 90       	pop	r1
     8f4:	18 95       	reti

000008f6 <main>:
#include "Motor_Controller/TriakRun.h"

int main(void)
{
	
	SysTick_Init();
     8f6:	d6 d2       	rcall	.+1452   	; 0xea4 <SysTick_Init>
	Relays_Init();
     8f8:	5c d0       	rcall	.+184    	; 0x9b2 <Relays_Init>
	Zero_Crossing_Init();
     8fa:	92 d3       	rcall	.+1828   	; 0x1020 <Zero_Crossing_Init>
	Adc_Init();
     8fc:	63 d0       	rcall	.+198    	; 0x9c4 <Adc_Init>
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU)); 
     8fe:	87 e6       	ldi	r24, 0x67	; 103
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	5b d3       	rcall	.+1718   	; 0xfba <uart_init>
	Capture_Pulde_Init();
     904:	e0 db       	rcall	.-2112   	; 0xc6 <Capture_Pulde_Init>
	Init_Pid_Motor();
     906:	07 d0       	rcall	.+14     	; 0x916 <Init_Pid_Motor>
	Device_Init();
     908:	0b dd       	rcall	.-1514   	; 0x320 <Device_Init>

	WDTCR |= (1<<WDE);
     90a:	81 b5       	in	r24, 0x21	; 33
     90c:	88 60       	ori	r24, 0x08	; 8
     90e:	81 bd       	out	0x21, r24	; 33
	
    while (1) 
    {
	wdt_reset();
     910:	a8 95       	wdr
	Device_Loop();
     912:	4a dd       	rcall	.-1388   	; 0x3a8 <Device_Loop>
     914:	fd cf       	rjmp	.-6      	; 0x910 <main+0x1a>

00000916 <Init_Pid_Motor>:


void Init_Pid_Motor()
{
	
	Ddr_triac |= (1<<triac_position);
     916:	a4 9a       	sbi	0x14, 4	; 20
	inttrupt_register |= (1<<timer0_enable_inttrupt_bit);
     918:	89 b7       	in	r24, 0x39	; 57
     91a:	81 60       	ori	r24, 0x01	; 1
     91c:	89 bf       	out	0x39, r24	; 57
	sei(); // enable intrupt
     91e:	78 94       	sei
     920:	08 95       	ret

00000922 <Run_Sw_Timer>:
{
	Tccr0_timer0 |= (1<<CS01) | (1<<CS00);
}
inline void stop_timer()
{
	Tccr0_timer0 =0;
     922:	13 be       	out	0x33, r1	; 51


void Run_Sw_Timer()
{
stop_timer();
if (Fan_Speed == 0)
     924:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <Fan_Speed>
     928:	81 11       	cpse	r24, r1
     92a:	0b c0       	rjmp	.+22     	; 0x942 <Run_Sw_Timer+0x20>
{
	if (motor_run_permission == 1)
     92c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <motor_run_permission>
     930:	81 30       	cpi	r24, 0x01	; 1
     932:	61 f4       	brne	.+24     	; 0x94c <Run_Sw_Timer+0x2a>
	{
		Port_triac |= (1<<triac_position);
     934:	ac 9a       	sbi	0x15, 4	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     936:	8a e0       	ldi	r24, 0x0A	; 10
     938:	8a 95       	dec	r24
     93a:	f1 f7       	brne	.-4      	; 0x938 <Run_Sw_Timer+0x16>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <Run_Sw_Timer+0x1c>
		_delay_us(2);
		Port_triac &= ~(1<<triac_position);
     93e:	ac 98       	cbi	0x15, 4	; 21
     940:	08 95       	ret
	}
}else
{
	counter =0;
     942:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <counter>
{
	motor_run_permission = Permission;
}
inline void start_timer()
{
	Tccr0_timer0 |= (1<<CS01) | (1<<CS00);
     946:	83 b7       	in	r24, 0x33	; 51
     948:	83 60       	ori	r24, 0x03	; 3
     94a:	83 bf       	out	0x33, r24	; 51
     94c:	08 95       	ret

0000094e <__vector_9>:
	start_timer();
}
}

ISR(timer0_ISR)
{
     94e:	1f 92       	push	r1
     950:	0f 92       	push	r0
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	0f 92       	push	r0
     956:	11 24       	eor	r1, r1
     958:	8f 93       	push	r24
     95a:	9f 93       	push	r25
	cli();
     95c:	f8 94       	cli
{
	Tccr0_timer0 |= (1<<CS01) | (1<<CS00);
}
inline void stop_timer()
{
	Tccr0_timer0 =0;
     95e:	13 be       	out	0x33, r1	; 51

ISR(timer0_ISR)
{
	cli();
	stop_timer();
	if (counter < Fan_Speed)
     960:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <counter>
     964:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <Fan_Speed>
     968:	89 17       	cp	r24, r25
     96a:	38 f4       	brcc	.+14     	; 0x97a <__vector_9+0x2c>
	{
		counter ++;
     96c:	8f 5f       	subi	r24, 0xFF	; 255
     96e:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <counter>
{
	motor_run_permission = Permission;
}
inline void start_timer()
{
	Tccr0_timer0 |= (1<<CS01) | (1<<CS00);
     972:	83 b7       	in	r24, 0x33	; 51
     974:	83 60       	ori	r24, 0x03	; 3
     976:	83 bf       	out	0x33, r24	; 51
     978:	0e c0       	rjmp	.+28     	; 0x996 <__vector_9+0x48>
	if (counter < Fan_Speed)
	{
		counter ++;
		start_timer();
	}
	else if (counter == Fan_Speed)
     97a:	89 13       	cpse	r24, r25
     97c:	0c c0       	rjmp	.+24     	; 0x996 <__vector_9+0x48>
	{
		
		counter =0;
     97e:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <counter>
		if (motor_run_permission == 1)
     982:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <motor_run_permission>
     986:	81 30       	cpi	r24, 0x01	; 1
     988:	31 f4       	brne	.+12     	; 0x996 <__vector_9+0x48>
		{
			Port_triac |= (1<<triac_position);
     98a:	ac 9a       	sbi	0x15, 4	; 21
     98c:	85 e3       	ldi	r24, 0x35	; 53
     98e:	8a 95       	dec	r24
     990:	f1 f7       	brne	.-4      	; 0x98e <__vector_9+0x40>
     992:	00 00       	nop
			_delay_us(10);
			Port_triac &= ~(1<<triac_position);
     994:	ac 98       	cbi	0x15, 4	; 21
		}
	}
	sei();
     996:	78 94       	sei
}
     998:	9f 91       	pop	r25
     99a:	8f 91       	pop	r24
     99c:	0f 90       	pop	r0
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	0f 90       	pop	r0
     9a2:	1f 90       	pop	r1
     9a4:	18 95       	reti

000009a6 <Set_FanSpeed>:

//**************************************seter************************
void Set_FanSpeed(uint8_t FanSpeed)
{
	Fan_Speed = FanSpeed;
     9a6:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <Fan_Speed>
     9aa:	08 95       	ret

000009ac <Set_FanPermission>:

}
void Set_FanPermission(uint8_t Permission)
{
	motor_run_permission = Permission;
     9ac:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <motor_run_permission>
     9b0:	08 95       	ret

000009b2 <Relays_Init>:
#define OFF 0


void Relays_Init()
{
	Ddr_Relay_1 |= (1<<Relay_1_Position);
     9b2:	a3 9a       	sbi	0x14, 3	; 20
	Port_Relay_1 &= ~(1<<Relay_1_Position);
     9b4:	ab 98       	cbi	0x15, 3	; 21
     9b6:	08 95       	ret

000009b8 <Relay_1_Target>:
}
void Relay_1_Target(uint8_t mode)
{
	if (mode == ON)
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	11 f4       	brne	.+4      	; 0x9c0 <Relay_1_Target+0x8>
	{
		Port_Relay_1 |= (1<<Relay_1_Position);
     9bc:	ab 9a       	sbi	0x15, 3	; 21
     9be:	08 95       	ret
	}
	else
	{
		Port_Relay_1 &= ~(1<<Relay_1_Position);
     9c0:	ab 98       	cbi	0x15, 3	; 21
     9c2:	08 95       	ret

000009c4 <Adc_Init>:



void Adc_Init()
{
	AdcControlStatusRegister = 0b00001111;
     9c4:	8f e0       	ldi	r24, 0x0F	; 15
     9c6:	86 b9       	out	0x06, r24	; 6
	adc_timer_handler = get_Systick();
     9c8:	77 d2       	rcall	.+1262   	; 0xeb8 <get_Systick>
     9ca:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <adc_timer_handler>
     9ce:	70 93 a9 00 	sts	0x00A9, r23	; 0x8000a9 <adc_timer_handler+0x1>
     9d2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <adc_timer_handler+0x2>
     9d6:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <adc_timer_handler+0x3>
	Adc_Permission = 0;
     9da:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <Adc_Permission>
	Adc_Status = FLAG_ADC_FREE;
     9de:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <Adc_Status>
     9e2:	08 95       	ret

000009e4 <Read_Adc>:
	
}

void Read_Adc(uint8_t channel)
{
	switch(channel)
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	61 f0       	breq	.+24     	; 0xa00 <Read_Adc+0x1c>
     9e8:	18 f0       	brcs	.+6      	; 0x9f0 <Read_Adc+0xc>
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	91 f0       	breq	.+36     	; 0xa12 <Read_Adc+0x2e>
     9ee:	19 c0       	rjmp	.+50     	; 0xa22 <Read_Adc+0x3e>
	{
		case 0:
		AdcMultiplexerSelectionRegister = 0b01000000;
     9f0:	80 e4       	ldi	r24, 0x40	; 64
     9f2:	87 b9       	out	0x07, r24	; 7
		Adc_Status = FLAG_ADC_0;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <Adc_Status>
		Adc_Permission = 1;
     9fa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Adc_Permission>
		break;
     9fe:	11 c0       	rjmp	.+34     	; 0xa22 <Read_Adc+0x3e>
		case 1:
		AdcMultiplexerSelectionRegister = 0b01000001;
     a00:	81 e4       	ldi	r24, 0x41	; 65
     a02:	87 b9       	out	0x07, r24	; 7
		Adc_Status = FLAG_ADC_1;
     a04:	82 e0       	ldi	r24, 0x02	; 2
     a06:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <Adc_Status>
		Adc_Permission = 1;
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Adc_Permission>
		break;
     a10:	08 c0       	rjmp	.+16     	; 0xa22 <Read_Adc+0x3e>
		case 2:
		AdcMultiplexerSelectionRegister = 0b01000010;
     a12:	82 e4       	ldi	r24, 0x42	; 66
     a14:	87 b9       	out	0x07, r24	; 7
		Adc_Status = FLAG_ADC_2;
     a16:	83 e0       	ldi	r24, 0x03	; 3
     a18:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <Adc_Status>
		Adc_Permission = 1;
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Adc_Permission>
		break;
	}
		AdcControlStatusRegister |= (1<<Turning);
     a22:	37 9a       	sbi	0x06, 7	; 6
		AdcControlStatusRegister |= (1<<StartConversion);
     a24:	36 9a       	sbi	0x06, 6	; 6
     a26:	08 95       	ret

00000a28 <__vector_14>:
}


ISR(Adc_ISR)
{
     a28:	1f 92       	push	r1
     a2a:	0f 92       	push	r0
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	0f 92       	push	r0
     a30:	11 24       	eor	r1, r1
     a32:	2f 93       	push	r18
     a34:	3f 93       	push	r19
     a36:	4f 93       	push	r20
     a38:	5f 93       	push	r21
     a3a:	6f 93       	push	r22
     a3c:	7f 93       	push	r23
     a3e:	8f 93       	push	r24
     a40:	9f 93       	push	r25
     a42:	af 93       	push	r26
     a44:	bf 93       	push	r27
     a46:	ef 93       	push	r30
     a48:	ff 93       	push	r31
	switch(Adc_Status)
     a4a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Adc_Status>
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	b9 f1       	breq	.+110    	; 0xac0 <__vector_14+0x98>
     a52:	83 30       	cpi	r24, 0x03	; 3
     a54:	09 f4       	brne	.+2      	; 0xa58 <__vector_14+0x30>
     a56:	65 c0       	rjmp	.+202    	; 0xb22 <__vector_14+0xfa>
     a58:	81 30       	cpi	r24, 0x01	; 1
     a5a:	09 f0       	breq	.+2      	; 0xa5e <__vector_14+0x36>
     a5c:	91 c0       	rjmp	.+290    	; 0xb80 <__vector_14+0x158>
	{
		
		case FLAG_ADC_0:
		if (countSamplingTemp0 < 10)
     a5e:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <countSamplingTemp0>
     a62:	8a 30       	cpi	r24, 0x0A	; 10
     a64:	90 f4       	brcc	.+36     	; 0xa8a <__vector_14+0x62>
		{
			countSamplingTemp0++;
     a66:	8f 5f       	subi	r24, 0xFF	; 255
     a68:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <countSamplingTemp0>
			temp_0_Sampling += Result;
     a6c:	84 b1       	in	r24, 0x04	; 4
     a6e:	95 b1       	in	r25, 0x05	; 5
     a70:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <temp_0_Sampling>
     a74:	30 91 bc 00 	lds	r19, 0x00BC	; 0x8000bc <temp_0_Sampling+0x1>
     a78:	82 0f       	add	r24, r18
     a7a:	93 1f       	adc	r25, r19
     a7c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <temp_0_Sampling+0x1>
     a80:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <temp_0_Sampling>
			Adc_Permission = 0;
     a84:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <Adc_Permission>
     a88:	7b c0       	rjmp	.+246    	; 0xb80 <__vector_14+0x158>
		}
		else if(countSamplingTemp0 == 10)
     a8a:	8a 30       	cpi	r24, 0x0A	; 10
     a8c:	09 f0       	breq	.+2      	; 0xa90 <__vector_14+0x68>
     a8e:	78 c0       	rjmp	.+240    	; 0xb80 <__vector_14+0x158>
		{
			temp_0 = temp_0_Sampling;
     a90:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <temp_0_Sampling>
     a94:	70 91 bc 00 	lds	r23, 0x00BC	; 0x8000bc <temp_0_Sampling+0x1>
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	ec d3       	rcall	.+2008   	; 0x1276 <__floatunsisf>
     a9e:	60 93 bd 00 	sts	0x00BD, r22	; 0x8000bd <temp_0>
     aa2:	70 93 be 00 	sts	0x00BE, r23	; 0x8000be <temp_0+0x1>
     aa6:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <temp_0+0x2>
     aaa:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <temp_0+0x3>
			countSamplingTemp0 = 0;
     aae:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <countSamplingTemp0>
			temp_0_Sampling = 0;
     ab2:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <temp_0_Sampling+0x1>
     ab6:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <temp_0_Sampling>
			Adc_Permission = 0;
     aba:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <Adc_Permission>
     abe:	60 c0       	rjmp	.+192    	; 0xb80 <__vector_14+0x158>
		}
		break;
		
		case FLAG_ADC_1:
		if (countSamplingTemp1 < 10)
     ac0:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <countSamplingTemp1>
     ac4:	8a 30       	cpi	r24, 0x0A	; 10
     ac6:	90 f4       	brcc	.+36     	; 0xaec <__vector_14+0xc4>
		{
			countSamplingTemp1++;
     ac8:	8f 5f       	subi	r24, 0xFF	; 255
     aca:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <countSamplingTemp1>
			temp_1_Sampling += Result;
     ace:	84 b1       	in	r24, 0x04	; 4
     ad0:	95 b1       	in	r25, 0x05	; 5
     ad2:	20 91 b5 00 	lds	r18, 0x00B5	; 0x8000b5 <temp_1_Sampling>
     ad6:	30 91 b6 00 	lds	r19, 0x00B6	; 0x8000b6 <temp_1_Sampling+0x1>
     ada:	82 0f       	add	r24, r18
     adc:	93 1f       	adc	r25, r19
     ade:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <temp_1_Sampling+0x1>
     ae2:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <temp_1_Sampling>
			Adc_Permission = 0;
     ae6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <Adc_Permission>
     aea:	4a c0       	rjmp	.+148    	; 0xb80 <__vector_14+0x158>
		}
		else if(countSamplingTemp1 == 10)
     aec:	8a 30       	cpi	r24, 0x0A	; 10
     aee:	09 f0       	breq	.+2      	; 0xaf2 <__vector_14+0xca>
     af0:	47 c0       	rjmp	.+142    	; 0xb80 <__vector_14+0x158>
		{
			temp_1 = temp_1_Sampling;
     af2:	60 91 b5 00 	lds	r22, 0x00B5	; 0x8000b5 <temp_1_Sampling>
     af6:	70 91 b6 00 	lds	r23, 0x00B6	; 0x8000b6 <temp_1_Sampling+0x1>
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	bb d3       	rcall	.+1910   	; 0x1276 <__floatunsisf>
     b00:	60 93 b7 00 	sts	0x00B7, r22	; 0x8000b7 <temp_1>
     b04:	70 93 b8 00 	sts	0x00B8, r23	; 0x8000b8 <temp_1+0x1>
     b08:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <temp_1+0x2>
     b0c:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <temp_1+0x3>
			countSamplingTemp1 = 0;
     b10:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <countSamplingTemp1>
			temp_1_Sampling = 0;
     b14:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <temp_1_Sampling+0x1>
     b18:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <temp_1_Sampling>
			Adc_Permission = 0;
     b1c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <Adc_Permission>
     b20:	2f c0       	rjmp	.+94     	; 0xb80 <__vector_14+0x158>
		}
		break;
		
		case FLAG_ADC_2:
		if (countSamplingTemp2 < 10)
     b22:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <countSamplingTemp2>
     b26:	8a 30       	cpi	r24, 0x0A	; 10
     b28:	90 f4       	brcc	.+36     	; 0xb4e <__vector_14+0x126>
		{
			countSamplingTemp2++;
     b2a:	8f 5f       	subi	r24, 0xFF	; 255
     b2c:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <countSamplingTemp2>
			temp_2_Sampling += Result;
     b30:	84 b1       	in	r24, 0x04	; 4
     b32:	95 b1       	in	r25, 0x05	; 5
     b34:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <temp_2_Sampling>
     b38:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <temp_2_Sampling+0x1>
     b3c:	82 0f       	add	r24, r18
     b3e:	93 1f       	adc	r25, r19
     b40:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <temp_2_Sampling+0x1>
     b44:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <temp_2_Sampling>
			Adc_Permission = 0;
     b48:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <Adc_Permission>
     b4c:	19 c0       	rjmp	.+50     	; 0xb80 <__vector_14+0x158>
		}
		else if(countSamplingTemp2 == 10)
     b4e:	8a 30       	cpi	r24, 0x0A	; 10
     b50:	b9 f4       	brne	.+46     	; 0xb80 <__vector_14+0x158>
		{
			temp_2 = temp_2_Sampling;
     b52:	60 91 af 00 	lds	r22, 0x00AF	; 0x8000af <temp_2_Sampling>
     b56:	70 91 b0 00 	lds	r23, 0x00B0	; 0x8000b0 <temp_2_Sampling+0x1>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	8b d3       	rcall	.+1814   	; 0x1276 <__floatunsisf>
     b60:	60 93 b1 00 	sts	0x00B1, r22	; 0x8000b1 <temp_2>
     b64:	70 93 b2 00 	sts	0x00B2, r23	; 0x8000b2 <temp_2+0x1>
     b68:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <temp_2+0x2>
     b6c:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <temp_2+0x3>
			countSamplingTemp2 = 0;
     b70:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <countSamplingTemp2>
			temp_2_Sampling = 0;
     b74:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <temp_2_Sampling+0x1>
     b78:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <temp_2_Sampling>
			Adc_Permission = 0;
     b7c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <Adc_Permission>
		}
		break;
		
	}
	AdcControlStatusRegister &= ~(1<<Turning);
     b80:	37 98       	cbi	0x06, 7	; 6
}
     b82:	ff 91       	pop	r31
     b84:	ef 91       	pop	r30
     b86:	bf 91       	pop	r27
     b88:	af 91       	pop	r26
     b8a:	9f 91       	pop	r25
     b8c:	8f 91       	pop	r24
     b8e:	7f 91       	pop	r23
     b90:	6f 91       	pop	r22
     b92:	5f 91       	pop	r21
     b94:	4f 91       	pop	r20
     b96:	3f 91       	pop	r19
     b98:	2f 91       	pop	r18
     b9a:	0f 90       	pop	r0
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	0f 90       	pop	r0
     ba0:	1f 90       	pop	r1
     ba2:	18 95       	reti

00000ba4 <adc_handler>:

void adc_handler()
{
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
	if(get_Systick() > adc_timer_handler)
     ba8:	87 d1       	rcall	.+782    	; 0xeb8 <get_Systick>
     baa:	00 91 a8 00 	lds	r16, 0x00A8	; 0x8000a8 <adc_timer_handler>
     bae:	10 91 a9 00 	lds	r17, 0x00A9	; 0x8000a9 <adc_timer_handler+0x1>
     bb2:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <adc_timer_handler+0x2>
     bb6:	30 91 ab 00 	lds	r19, 0x00AB	; 0x8000ab <adc_timer_handler+0x3>
     bba:	06 17       	cp	r16, r22
     bbc:	17 07       	cpc	r17, r23
     bbe:	28 07       	cpc	r18, r24
     bc0:	39 07       	cpc	r19, r25
     bc2:	60 f5       	brcc	.+88     	; 0xc1c <adc_handler+0x78>
	{
		switch(Adc_Status)
     bc4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Adc_Status>
     bc8:	81 30       	cpi	r24, 0x01	; 1
     bca:	31 f0       	breq	.+12     	; 0xbd8 <adc_handler+0x34>
     bcc:	98 f0       	brcs	.+38     	; 0xbf4 <adc_handler+0x50>
     bce:	82 30       	cpi	r24, 0x02	; 2
     bd0:	51 f0       	breq	.+20     	; 0xbe6 <adc_handler+0x42>
     bd2:	83 30       	cpi	r24, 0x03	; 3
     bd4:	a1 f4       	brne	.+40     	; 0xbfe <adc_handler+0x5a>
     bd6:	0e c0       	rjmp	.+28     	; 0xbf4 <adc_handler+0x50>
		{
			case FLAG_ADC_0:
			if(Adc_Permission == 0)
     bd8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Adc_Permission>
     bdc:	81 11       	cpse	r24, r1
     bde:	0f c0       	rjmp	.+30     	; 0xbfe <adc_handler+0x5a>
			{
				Read_Adc(1);
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	00 df       	rcall	.-512    	; 0x9e4 <Read_Adc>
     be4:	0c c0       	rjmp	.+24     	; 0xbfe <adc_handler+0x5a>
			}
			break;
			
			case FLAG_ADC_1:
			if(Adc_Permission == 0)
     be6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Adc_Permission>
     bea:	81 11       	cpse	r24, r1
     bec:	08 c0       	rjmp	.+16     	; 0xbfe <adc_handler+0x5a>
			{
				Read_Adc(2);
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	f9 de       	rcall	.-526    	; 0x9e4 <Read_Adc>
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <adc_handler+0x5a>
			}
			break;
			
			case FLAG_ADC_FREE:
			case FLAG_ADC_2:
			if(Adc_Permission == 0)
     bf4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Adc_Permission>
     bf8:	81 11       	cpse	r24, r1
     bfa:	01 c0       	rjmp	.+2      	; 0xbfe <adc_handler+0x5a>
			{
				Read_Adc(0);
     bfc:	f3 de       	rcall	.-538    	; 0x9e4 <Read_Adc>
			}
			break;
		}
			adc_timer_handler = get_Systick() + 100;
     bfe:	5c d1       	rcall	.+696    	; 0xeb8 <get_Systick>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	8c 59       	subi	r24, 0x9C	; 156
     c06:	9f 4f       	sbci	r25, 0xFF	; 255
     c08:	af 4f       	sbci	r26, 0xFF	; 255
     c0a:	bf 4f       	sbci	r27, 0xFF	; 255
     c0c:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <adc_timer_handler>
     c10:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <adc_timer_handler+0x1>
     c14:	a0 93 aa 00 	sts	0x00AA, r26	; 0x8000aa <adc_timer_handler+0x2>
     c18:	b0 93 ab 00 	sts	0x00AB, r27	; 0x8000ab <adc_timer_handler+0x3>
	}

}
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	08 95       	ret

00000c22 <get_temp_0>:
//++++++++++++++++++++++temp geter methods ====================
uint8_t get_temp_0()
{
     c22:	8f 92       	push	r8
     c24:	9f 92       	push	r9
     c26:	af 92       	push	r10
     c28:	bf 92       	push	r11
     c2a:	cf 92       	push	r12
     c2c:	df 92       	push	r13
     c2e:	ef 92       	push	r14
     c30:	ff 92       	push	r15
	if (temp_0  == 0)
     c32:	c0 90 bd 00 	lds	r12, 0x00BD	; 0x8000bd <temp_0>
     c36:	d0 90 be 00 	lds	r13, 0x00BE	; 0x8000be <temp_0+0x1>
     c3a:	e0 90 bf 00 	lds	r14, 0x00BF	; 0x8000bf <temp_0+0x2>
     c3e:	f0 90 c0 00 	lds	r15, 0x00C0	; 0x8000c0 <temp_0+0x3>
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	a9 01       	movw	r20, r18
     c48:	c7 01       	movw	r24, r14
     c4a:	b6 01       	movw	r22, r12
     c4c:	7c d2       	rcall	.+1272   	; 0x1146 <__cmpsf2>
     c4e:	88 23       	and	r24, r24
     c50:	09 f4       	brne	.+2      	; 0xc54 <get_temp_0+0x32>
     c52:	48 c0       	rjmp	.+144    	; 0xce4 <get_temp_0+0xc2>
	{
	temp_0_0 =0;	
	temp_0_0  = temp_0/10 ;
	temp_0_0 = temp_0_0 * 0.004887;
	temp_0_0 =((50000) / temp_0_0) - 10000;
	temp_0_0 = log(temp_0_0);
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	40 e2       	ldi	r20, 0x20	; 32
     c5a:	51 e4       	ldi	r21, 0x41	; 65
     c5c:	c7 01       	movw	r24, r14
     c5e:	b6 01       	movw	r22, r12
     c60:	76 d2       	rcall	.+1260   	; 0x114e <__divsf3>
     c62:	21 e2       	ldi	r18, 0x21	; 33
     c64:	33 e2       	ldi	r19, 0x23	; 35
     c66:	40 ea       	ldi	r20, 0xA0	; 160
     c68:	5b e3       	ldi	r21, 0x3B	; 59
     c6a:	fc d3       	rcall	.+2040   	; 0x1464 <__mulsf3>
     c6c:	9b 01       	movw	r18, r22
     c6e:	ac 01       	movw	r20, r24
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	70 e5       	ldi	r23, 0x50	; 80
     c74:	83 e4       	ldi	r24, 0x43	; 67
     c76:	97 e4       	ldi	r25, 0x47	; 71
     c78:	6a d2       	rcall	.+1236   	; 0x114e <__divsf3>
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e4       	ldi	r19, 0x40	; 64
     c7e:	4c e1       	ldi	r20, 0x1C	; 28
     c80:	56 e4       	ldi	r21, 0x46	; 70
     c82:	fc d1       	rcall	.+1016   	; 0x107c <__subsf3>
     c84:	af d3       	rcall	.+1886   	; 0x13e4 <log>
     c86:	6b 01       	movw	r12, r22
     c88:	7c 01       	movw	r14, r24
	temp_0_0 = 1 / (0.0008857638952 + (0.0002514208257  * temp_0_0) + (0.0000001952872394 * temp_0_0 * temp_0_0 * temp_0_0));
	//Convert in Celsius
	temp_0_0 = temp_0_0 - 273.15;
	return (uint8_t)temp_0_0;
     c8a:	26 e2       	ldi	r18, 0x26	; 38
     c8c:	30 eb       	ldi	r19, 0xB0	; 176
     c8e:	41 e5       	ldi	r20, 0x51	; 81
     c90:	54 e3       	ldi	r21, 0x34	; 52
     c92:	e8 d3       	rcall	.+2000   	; 0x1464 <__mulsf3>
     c94:	a7 01       	movw	r20, r14
     c96:	96 01       	movw	r18, r12
     c98:	e5 d3       	rcall	.+1994   	; 0x1464 <__mulsf3>
     c9a:	a7 01       	movw	r20, r14
     c9c:	96 01       	movw	r18, r12
     c9e:	e2 d3       	rcall	.+1988   	; 0x1464 <__mulsf3>
     ca0:	4b 01       	movw	r8, r22
     ca2:	5c 01       	movw	r10, r24
     ca4:	22 e2       	ldi	r18, 0x22	; 34
     ca6:	31 ed       	ldi	r19, 0xD1	; 209
     ca8:	43 e8       	ldi	r20, 0x83	; 131
     caa:	59 e3       	ldi	r21, 0x39	; 57
     cac:	c7 01       	movw	r24, r14
     cae:	b6 01       	movw	r22, r12
     cb0:	d9 d3       	rcall	.+1970   	; 0x1464 <__mulsf3>
     cb2:	2c e9       	ldi	r18, 0x9C	; 156
     cb4:	32 e3       	ldi	r19, 0x32	; 50
     cb6:	48 e6       	ldi	r20, 0x68	; 104
     cb8:	5a e3       	ldi	r21, 0x3A	; 58
     cba:	e1 d1       	rcall	.+962    	; 0x107e <__addsf3>
     cbc:	9b 01       	movw	r18, r22
     cbe:	ac 01       	movw	r20, r24
     cc0:	c5 01       	movw	r24, r10
     cc2:	b4 01       	movw	r22, r8
     cc4:	dc d1       	rcall	.+952    	; 0x107e <__addsf3>
     cc6:	9b 01       	movw	r18, r22
     cc8:	ac 01       	movw	r20, r24
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	80 e8       	ldi	r24, 0x80	; 128
     cd0:	9f e3       	ldi	r25, 0x3F	; 63
     cd2:	3d d2       	rcall	.+1146   	; 0x114e <__divsf3>
     cd4:	23 e3       	ldi	r18, 0x33	; 51
     cd6:	33 e9       	ldi	r19, 0x93	; 147
     cd8:	48 e8       	ldi	r20, 0x88	; 136
     cda:	53 e4       	ldi	r21, 0x43	; 67
     cdc:	cf d1       	rcall	.+926    	; 0x107c <__subsf3>
     cde:	9f d2       	rcall	.+1342   	; 0x121e <__fixunssfsi>
     ce0:	86 2f       	mov	r24, r22
     ce2:	01 c0       	rjmp	.+2      	; 0xce6 <get_temp_0+0xc4>
//++++++++++++++++++++++temp geter methods ====================
uint8_t get_temp_0()
{
	if (temp_0  == 0)
	{
	return 0;
     ce4:	80 e0       	ldi	r24, 0x00	; 0
	temp_0_0 = 1 / (0.0008857638952 + (0.0002514208257  * temp_0_0) + (0.0000001952872394 * temp_0_0 * temp_0_0 * temp_0_0));
	//Convert in Celsius
	temp_0_0 = temp_0_0 - 273.15;
	return (uint8_t)temp_0_0;
	}
}
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	df 90       	pop	r13
     cec:	cf 90       	pop	r12
     cee:	bf 90       	pop	r11
     cf0:	af 90       	pop	r10
     cf2:	9f 90       	pop	r9
     cf4:	8f 90       	pop	r8
     cf6:	08 95       	ret

00000cf8 <get_temp_1>:
uint8_t get_temp_1()
{	
     cf8:	8f 92       	push	r8
     cfa:	9f 92       	push	r9
     cfc:	af 92       	push	r10
     cfe:	bf 92       	push	r11
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
	if (temp_1  == 0)
     d08:	c0 90 b7 00 	lds	r12, 0x00B7	; 0x8000b7 <temp_1>
     d0c:	d0 90 b8 00 	lds	r13, 0x00B8	; 0x8000b8 <temp_1+0x1>
     d10:	e0 90 b9 00 	lds	r14, 0x00B9	; 0x8000b9 <temp_1+0x2>
     d14:	f0 90 ba 00 	lds	r15, 0x00BA	; 0x8000ba <temp_1+0x3>
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	a9 01       	movw	r20, r18
     d1e:	c7 01       	movw	r24, r14
     d20:	b6 01       	movw	r22, r12
     d22:	11 d2       	rcall	.+1058   	; 0x1146 <__cmpsf2>
     d24:	88 23       	and	r24, r24
     d26:	09 f4       	brne	.+2      	; 0xd2a <get_temp_1+0x32>
     d28:	48 c0       	rjmp	.+144    	; 0xdba <get_temp_1+0xc2>
	{
	temp_1_1 =0;	
	temp_1_1  = temp_1 /10;
	temp_1_1 = temp_1_1 * 0.004887;
	temp_1_1 =((50000) / temp_1_1) - 10000;
	temp_1_1 = log(temp_1_1);
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e2       	ldi	r20, 0x20	; 32
     d30:	51 e4       	ldi	r21, 0x41	; 65
     d32:	c7 01       	movw	r24, r14
     d34:	b6 01       	movw	r22, r12
     d36:	0b d2       	rcall	.+1046   	; 0x114e <__divsf3>
     d38:	21 e2       	ldi	r18, 0x21	; 33
     d3a:	33 e2       	ldi	r19, 0x23	; 35
     d3c:	40 ea       	ldi	r20, 0xA0	; 160
     d3e:	5b e3       	ldi	r21, 0x3B	; 59
     d40:	91 d3       	rcall	.+1826   	; 0x1464 <__mulsf3>
     d42:	9b 01       	movw	r18, r22
     d44:	ac 01       	movw	r20, r24
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	70 e5       	ldi	r23, 0x50	; 80
     d4a:	83 e4       	ldi	r24, 0x43	; 67
     d4c:	97 e4       	ldi	r25, 0x47	; 71
     d4e:	ff d1       	rcall	.+1022   	; 0x114e <__divsf3>
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e4       	ldi	r19, 0x40	; 64
     d54:	4c e1       	ldi	r20, 0x1C	; 28
     d56:	56 e4       	ldi	r21, 0x46	; 70
     d58:	91 d1       	rcall	.+802    	; 0x107c <__subsf3>
     d5a:	44 d3       	rcall	.+1672   	; 0x13e4 <log>
     d5c:	6b 01       	movw	r12, r22
     d5e:	7c 01       	movw	r14, r24
	temp_1_1 = 1 / (0.0008857638952 + (0.0002514208257 * temp_1_1) + (0.0000001952872394 * temp_1_1 * temp_1_1 * temp_1_1));
	//Convert in Celsius
	temp_1_1 = temp_1_1 - 273.15;
	return  (uint8_t)temp_1_1;
     d60:	26 e2       	ldi	r18, 0x26	; 38
     d62:	30 eb       	ldi	r19, 0xB0	; 176
     d64:	41 e5       	ldi	r20, 0x51	; 81
     d66:	54 e3       	ldi	r21, 0x34	; 52
     d68:	7d d3       	rcall	.+1786   	; 0x1464 <__mulsf3>
     d6a:	a7 01       	movw	r20, r14
     d6c:	96 01       	movw	r18, r12
     d6e:	7a d3       	rcall	.+1780   	; 0x1464 <__mulsf3>
     d70:	a7 01       	movw	r20, r14
     d72:	96 01       	movw	r18, r12
     d74:	77 d3       	rcall	.+1774   	; 0x1464 <__mulsf3>
     d76:	4b 01       	movw	r8, r22
     d78:	5c 01       	movw	r10, r24
     d7a:	22 e2       	ldi	r18, 0x22	; 34
     d7c:	31 ed       	ldi	r19, 0xD1	; 209
     d7e:	43 e8       	ldi	r20, 0x83	; 131
     d80:	59 e3       	ldi	r21, 0x39	; 57
     d82:	c7 01       	movw	r24, r14
     d84:	b6 01       	movw	r22, r12
     d86:	6e d3       	rcall	.+1756   	; 0x1464 <__mulsf3>
     d88:	2c e9       	ldi	r18, 0x9C	; 156
     d8a:	32 e3       	ldi	r19, 0x32	; 50
     d8c:	48 e6       	ldi	r20, 0x68	; 104
     d8e:	5a e3       	ldi	r21, 0x3A	; 58
     d90:	76 d1       	rcall	.+748    	; 0x107e <__addsf3>
     d92:	9b 01       	movw	r18, r22
     d94:	ac 01       	movw	r20, r24
     d96:	c5 01       	movw	r24, r10
     d98:	b4 01       	movw	r22, r8
     d9a:	71 d1       	rcall	.+738    	; 0x107e <__addsf3>
     d9c:	9b 01       	movw	r18, r22
     d9e:	ac 01       	movw	r20, r24
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	80 e8       	ldi	r24, 0x80	; 128
     da6:	9f e3       	ldi	r25, 0x3F	; 63
     da8:	d2 d1       	rcall	.+932    	; 0x114e <__divsf3>
     daa:	23 e3       	ldi	r18, 0x33	; 51
     dac:	33 e9       	ldi	r19, 0x93	; 147
     dae:	48 e8       	ldi	r20, 0x88	; 136
     db0:	53 e4       	ldi	r21, 0x43	; 67
     db2:	64 d1       	rcall	.+712    	; 0x107c <__subsf3>
     db4:	34 d2       	rcall	.+1128   	; 0x121e <__fixunssfsi>
     db6:	86 2f       	mov	r24, r22
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <get_temp_1+0xc4>
}
uint8_t get_temp_1()
{	
	if (temp_1  == 0)
	{
	return 0;
     dba:	80 e0       	ldi	r24, 0x00	; 0
	temp_1_1 = 1 / (0.0008857638952 + (0.0002514208257 * temp_1_1) + (0.0000001952872394 * temp_1_1 * temp_1_1 * temp_1_1));
	//Convert in Celsius
	temp_1_1 = temp_1_1 - 273.15;
	return  (uint8_t)temp_1_1;
	}
}
     dbc:	ff 90       	pop	r15
     dbe:	ef 90       	pop	r14
     dc0:	df 90       	pop	r13
     dc2:	cf 90       	pop	r12
     dc4:	bf 90       	pop	r11
     dc6:	af 90       	pop	r10
     dc8:	9f 90       	pop	r9
     dca:	8f 90       	pop	r8
     dcc:	08 95       	ret

00000dce <get_temp_2>:
uint8_t get_temp_2()
{
     dce:	8f 92       	push	r8
     dd0:	9f 92       	push	r9
     dd2:	af 92       	push	r10
     dd4:	bf 92       	push	r11
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
	if (temp_2  == 0)
     dde:	c0 90 b1 00 	lds	r12, 0x00B1	; 0x8000b1 <temp_2>
     de2:	d0 90 b2 00 	lds	r13, 0x00B2	; 0x8000b2 <temp_2+0x1>
     de6:	e0 90 b3 00 	lds	r14, 0x00B3	; 0x8000b3 <temp_2+0x2>
     dea:	f0 90 b4 00 	lds	r15, 0x00B4	; 0x8000b4 <temp_2+0x3>
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	a9 01       	movw	r20, r18
     df4:	c7 01       	movw	r24, r14
     df6:	b6 01       	movw	r22, r12
     df8:	a6 d1       	rcall	.+844    	; 0x1146 <__cmpsf2>
     dfa:	88 23       	and	r24, r24
     dfc:	09 f4       	brne	.+2      	; 0xe00 <get_temp_2+0x32>
     dfe:	48 c0       	rjmp	.+144    	; 0xe90 <get_temp_2+0xc2>
	{
	temp_2_2 = 0;
	temp_2_2  = temp_2 /10;	
	temp_2_2 = temp_2_2 * 0.004887;
	temp_2_2 =((50000) / temp_2_2) - 10000;
	temp_2_2 = log(temp_2_2);
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e2       	ldi	r20, 0x20	; 32
     e06:	51 e4       	ldi	r21, 0x41	; 65
     e08:	c7 01       	movw	r24, r14
     e0a:	b6 01       	movw	r22, r12
     e0c:	a0 d1       	rcall	.+832    	; 0x114e <__divsf3>
     e0e:	21 e2       	ldi	r18, 0x21	; 33
     e10:	33 e2       	ldi	r19, 0x23	; 35
     e12:	40 ea       	ldi	r20, 0xA0	; 160
     e14:	5b e3       	ldi	r21, 0x3B	; 59
     e16:	26 d3       	rcall	.+1612   	; 0x1464 <__mulsf3>
     e18:	9b 01       	movw	r18, r22
     e1a:	ac 01       	movw	r20, r24
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	70 e5       	ldi	r23, 0x50	; 80
     e20:	83 e4       	ldi	r24, 0x43	; 67
     e22:	97 e4       	ldi	r25, 0x47	; 71
     e24:	94 d1       	rcall	.+808    	; 0x114e <__divsf3>
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e4       	ldi	r19, 0x40	; 64
     e2a:	4c e1       	ldi	r20, 0x1C	; 28
     e2c:	56 e4       	ldi	r21, 0x46	; 70
     e2e:	26 d1       	rcall	.+588    	; 0x107c <__subsf3>
     e30:	d9 d2       	rcall	.+1458   	; 0x13e4 <log>
     e32:	6b 01       	movw	r12, r22
     e34:	7c 01       	movw	r14, r24
	temp_2_2 = 1 / (0.0008857638952 + (0.0002514208257 * temp_2_2) + (0.0000001952872394 * temp_2_2 * temp_2_2 * temp_2_2));
	//Convert in Celsius
	temp_2_2 = temp_2_2 - 273.15;
	return (uint8_t)temp_2_2;
     e36:	26 e2       	ldi	r18, 0x26	; 38
     e38:	30 eb       	ldi	r19, 0xB0	; 176
     e3a:	41 e5       	ldi	r20, 0x51	; 81
     e3c:	54 e3       	ldi	r21, 0x34	; 52
     e3e:	12 d3       	rcall	.+1572   	; 0x1464 <__mulsf3>
     e40:	a7 01       	movw	r20, r14
     e42:	96 01       	movw	r18, r12
     e44:	0f d3       	rcall	.+1566   	; 0x1464 <__mulsf3>
     e46:	a7 01       	movw	r20, r14
     e48:	96 01       	movw	r18, r12
     e4a:	0c d3       	rcall	.+1560   	; 0x1464 <__mulsf3>
     e4c:	4b 01       	movw	r8, r22
     e4e:	5c 01       	movw	r10, r24
     e50:	22 e2       	ldi	r18, 0x22	; 34
     e52:	31 ed       	ldi	r19, 0xD1	; 209
     e54:	43 e8       	ldi	r20, 0x83	; 131
     e56:	59 e3       	ldi	r21, 0x39	; 57
     e58:	c7 01       	movw	r24, r14
     e5a:	b6 01       	movw	r22, r12
     e5c:	03 d3       	rcall	.+1542   	; 0x1464 <__mulsf3>
     e5e:	2c e9       	ldi	r18, 0x9C	; 156
     e60:	32 e3       	ldi	r19, 0x32	; 50
     e62:	48 e6       	ldi	r20, 0x68	; 104
     e64:	5a e3       	ldi	r21, 0x3A	; 58
     e66:	0b d1       	rcall	.+534    	; 0x107e <__addsf3>
     e68:	9b 01       	movw	r18, r22
     e6a:	ac 01       	movw	r20, r24
     e6c:	c5 01       	movw	r24, r10
     e6e:	b4 01       	movw	r22, r8
     e70:	06 d1       	rcall	.+524    	; 0x107e <__addsf3>
     e72:	9b 01       	movw	r18, r22
     e74:	ac 01       	movw	r20, r24
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	80 e8       	ldi	r24, 0x80	; 128
     e7c:	9f e3       	ldi	r25, 0x3F	; 63
     e7e:	67 d1       	rcall	.+718    	; 0x114e <__divsf3>
     e80:	23 e3       	ldi	r18, 0x33	; 51
     e82:	33 e9       	ldi	r19, 0x93	; 147
     e84:	48 e8       	ldi	r20, 0x88	; 136
     e86:	53 e4       	ldi	r21, 0x43	; 67
     e88:	f9 d0       	rcall	.+498    	; 0x107c <__subsf3>
     e8a:	c9 d1       	rcall	.+914    	; 0x121e <__fixunssfsi>
     e8c:	86 2f       	mov	r24, r22
     e8e:	01 c0       	rjmp	.+2      	; 0xe92 <get_temp_2+0xc4>
}
uint8_t get_temp_2()
{
	if (temp_2  == 0)
	{
		return 0;
     e90:	80 e0       	ldi	r24, 0x00	; 0
	temp_2_2 = 1 / (0.0008857638952 + (0.0002514208257 * temp_2_2) + (0.0000001952872394 * temp_2_2 * temp_2_2 * temp_2_2));
	//Convert in Celsius
	temp_2_2 = temp_2_2 - 273.15;
	return (uint8_t)temp_2_2;
	}
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	df 90       	pop	r13
     e98:	cf 90       	pop	r12
     e9a:	bf 90       	pop	r11
     e9c:	af 90       	pop	r10
     e9e:	9f 90       	pop	r9
     ea0:	8f 90       	pop	r8
     ea2:	08 95       	ret

00000ea4 <SysTick_Init>:


//******************high level method***************************
void SysTick_Init()
{
	Tccr_timer2 |= (1<<WGM21)|(1<<CS22);
     ea4:	85 b5       	in	r24, 0x25	; 37
     ea6:	8c 60       	ori	r24, 0x0C	; 12
     ea8:	85 bd       	out	0x25, r24	; 37
	OCR_timer2 = 250; // set to up counting
     eaa:	8a ef       	ldi	r24, 0xFA	; 250
     eac:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<Ocie_timer2);
     eae:	89 b7       	in	r24, 0x39	; 57
     eb0:	80 68       	ori	r24, 0x80	; 128
     eb2:	89 bf       	out	0x39, r24	; 57
	sei(); // enable intrupt
     eb4:	78 94       	sei
     eb6:	08 95       	ret

00000eb8 <get_Systick>:
}

uint32_t get_Systick()
{
	return sysTick_timer2;
     eb8:	60 91 c1 00 	lds	r22, 0x00C1	; 0x8000c1 <sysTick_timer2>
     ebc:	70 91 c2 00 	lds	r23, 0x00C2	; 0x8000c2 <sysTick_timer2+0x1>
     ec0:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <sysTick_timer2+0x2>
     ec4:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <sysTick_timer2+0x3>
}
     ec8:	08 95       	ret

00000eca <__vector_3>:



ISR(timer2_ISR)
{
     eca:	1f 92       	push	r1
     ecc:	0f 92       	push	r0
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	0f 92       	push	r0
     ed2:	11 24       	eor	r1, r1
     ed4:	8f 93       	push	r24
     ed6:	9f 93       	push	r25
     ed8:	af 93       	push	r26
     eda:	bf 93       	push	r27
	cli();
     edc:	f8 94       	cli
	sysTick_timer2 ++;
     ede:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <sysTick_timer2>
     ee2:	90 91 c2 00 	lds	r25, 0x00C2	; 0x8000c2 <sysTick_timer2+0x1>
     ee6:	a0 91 c3 00 	lds	r26, 0x00C3	; 0x8000c3 <sysTick_timer2+0x2>
     eea:	b0 91 c4 00 	lds	r27, 0x00C4	; 0x8000c4 <sysTick_timer2+0x3>
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	a1 1d       	adc	r26, r1
     ef2:	b1 1d       	adc	r27, r1
     ef4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <sysTick_timer2>
     ef8:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <sysTick_timer2+0x1>
     efc:	a0 93 c3 00 	sts	0x00C3, r26	; 0x8000c3 <sysTick_timer2+0x2>
     f00:	b0 93 c4 00 	sts	0x00C4, r27	; 0x8000c4 <sysTick_timer2+0x3>
	sei();
     f04:	78 94       	sei
	
}
     f06:	bf 91       	pop	r27
     f08:	af 91       	pop	r26
     f0a:	9f 91       	pop	r25
     f0c:	8f 91       	pop	r24
     f0e:	0f 90       	pop	r0
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	0f 90       	pop	r0
     f14:	1f 90       	pop	r1
     f16:	18 95       	reti

00000f18 <__vector_11>:
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
     f18:	1f 92       	push	r1
     f1a:	0f 92       	push	r0
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	0f 92       	push	r0
     f20:	11 24       	eor	r1, r1
     f22:	2f 93       	push	r18
     f24:	8f 93       	push	r24
     f26:	9f 93       	push	r25
     f28:	ef 93       	push	r30
     f2a:	ff 93       	push	r31
     f2c:	8b b1       	in	r24, 0x0b	; 11
     f2e:	2c b1       	in	r18, 0x0c	; 12
     f30:	8c 71       	andi	r24, 0x1C	; 28
     f32:	e0 91 c7 00 	lds	r30, 0x00C7	; 0x8000c7 <UART_RxHead>
     f36:	ef 5f       	subi	r30, 0xFF	; 255
     f38:	ef 71       	andi	r30, 0x1F	; 31
     f3a:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <UART_RxTail>
     f3e:	e9 17       	cp	r30, r25
     f40:	39 f0       	breq	.+14     	; 0xf50 <__vector_11+0x38>
     f42:	e0 93 c7 00 	sts	0x00C7, r30	; 0x8000c7 <UART_RxHead>
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	e6 53       	subi	r30, 0x36	; 54
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	20 83       	st	Z, r18
     f4e:	01 c0       	rjmp	.+2      	; 0xf52 <__vector_11+0x3a>
     f50:	82 e0       	ldi	r24, 0x02	; 2
     f52:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <UART_LastRxError>
     f56:	89 2b       	or	r24, r25
     f58:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <UART_LastRxError>
     f5c:	ff 91       	pop	r31
     f5e:	ef 91       	pop	r30
     f60:	9f 91       	pop	r25
     f62:	8f 91       	pop	r24
     f64:	2f 91       	pop	r18
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	0f 90       	pop	r0
     f6c:	1f 90       	pop	r1
     f6e:	18 95       	reti

00000f70 <__vector_12>:
     f70:	1f 92       	push	r1
     f72:	0f 92       	push	r0
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	0f 92       	push	r0
     f78:	11 24       	eor	r1, r1
     f7a:	8f 93       	push	r24
     f7c:	9f 93       	push	r25
     f7e:	ef 93       	push	r30
     f80:	ff 93       	push	r31
     f82:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <UART_TxHead>
     f86:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <UART_TxTail>
     f8a:	98 17       	cp	r25, r24
     f8c:	61 f0       	breq	.+24     	; 0xfa6 <__vector_12+0x36>
     f8e:	e0 91 c8 00 	lds	r30, 0x00C8	; 0x8000c8 <UART_TxTail>
     f92:	ef 5f       	subi	r30, 0xFF	; 255
     f94:	ef 71       	andi	r30, 0x1F	; 31
     f96:	e0 93 c8 00 	sts	0x00C8, r30	; 0x8000c8 <UART_TxTail>
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	e6 51       	subi	r30, 0x16	; 22
     f9e:	ff 4f       	sbci	r31, 0xFF	; 255
     fa0:	80 81       	ld	r24, Z
     fa2:	8c b9       	out	0x0c, r24	; 12
     fa4:	01 c0       	rjmp	.+2      	; 0xfa8 <__vector_12+0x38>
     fa6:	55 98       	cbi	0x0a, 5	; 10
     fa8:	ff 91       	pop	r31
     faa:	ef 91       	pop	r30
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <uart_init>:
     fba:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <UART_TxHead>
     fbe:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <UART_TxTail>
     fc2:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <UART_RxHead>
     fc6:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <UART_RxTail>
     fca:	99 23       	and	r25, r25
     fcc:	14 f4       	brge	.+4      	; 0xfd2 <uart_init+0x18>
     fce:	22 e0       	ldi	r18, 0x02	; 2
     fd0:	2b b9       	out	0x0b, r18	; 11
     fd2:	90 78       	andi	r25, 0x80	; 128
     fd4:	90 bd       	out	0x20, r25	; 32
     fd6:	89 b9       	out	0x09, r24	; 9
     fd8:	88 e9       	ldi	r24, 0x98	; 152
     fda:	8a b9       	out	0x0a, r24	; 10
     fdc:	86 e8       	ldi	r24, 0x86	; 134
     fde:	80 bd       	out	0x20, r24	; 32
     fe0:	08 95       	ret

00000fe2 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     fe2:	20 91 c9 00 	lds	r18, 0x00C9	; 0x8000c9 <UART_TxHead>
     fe6:	2f 5f       	subi	r18, 0xFF	; 255
     fe8:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
     fea:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <UART_TxTail>
     fee:	29 17       	cp	r18, r25
     ff0:	e1 f3       	breq	.-8      	; 0xfea <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     ff2:	e2 2f       	mov	r30, r18
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	e6 51       	subi	r30, 0x16	; 22
     ff8:	ff 4f       	sbci	r31, 0xFF	; 255
     ffa:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     ffc:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    1000:	55 9a       	sbi	0x0a, 5	; 10
    1002:	08 95       	ret

00001004 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	ec 01       	movw	r28, r24
    while (*s) 
    100a:	88 81       	ld	r24, Y
    100c:	88 23       	and	r24, r24
    100e:	29 f0       	breq	.+10     	; 0x101a <uart_puts+0x16>
    1010:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
    1012:	e7 df       	rcall	.-50     	; 0xfe2 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    1014:	89 91       	ld	r24, Y+
    1016:	81 11       	cpse	r24, r1
    1018:	fc cf       	rjmp	.-8      	; 0x1012 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	08 95       	ret

00001020 <Zero_Crossing_Init>:


void Zero_Crossing_Init()
{
	
	zero_DDR &= ~(1<<Z_Position);
    1020:	8a 98       	cbi	0x11, 2	; 17
	Enable_Interrupt_Zero |= (1<<int_Mode_Zero);
    1022:	8b b7       	in	r24, 0x3b	; 59
    1024:	80 64       	ori	r24, 0x40	; 64
    1026:	8b bf       	out	0x3b, r24	; 59
	EXT_INT_STATUS_REGISTER_Zero |= (1<<ISC00)|(1<<ISC01);
    1028:	85 b7       	in	r24, 0x35	; 53
    102a:	83 60       	ori	r24, 0x03	; 3
    102c:	85 bf       	out	0x35, r24	; 53
	sei();
    102e:	78 94       	sei
    1030:	08 95       	ret

00001032 <__vector_1>:
}

ISR (isr_mode_Zero)
{
    1032:	1f 92       	push	r1
    1034:	0f 92       	push	r0
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	0f 92       	push	r0
    103a:	11 24       	eor	r1, r1
    103c:	2f 93       	push	r18
    103e:	3f 93       	push	r19
    1040:	4f 93       	push	r20
    1042:	5f 93       	push	r21
    1044:	6f 93       	push	r22
    1046:	7f 93       	push	r23
    1048:	8f 93       	push	r24
    104a:	9f 93       	push	r25
    104c:	af 93       	push	r26
    104e:	bf 93       	push	r27
    1050:	ef 93       	push	r30
    1052:	ff 93       	push	r31
	cli();
    1054:	f8 94       	cli
	Run_Sw_Timer();
    1056:	65 dc       	rcall	.-1846   	; 0x922 <Run_Sw_Timer>
	sei();
    1058:	78 94       	sei
}
    105a:	ff 91       	pop	r31
    105c:	ef 91       	pop	r30
    105e:	bf 91       	pop	r27
    1060:	af 91       	pop	r26
    1062:	9f 91       	pop	r25
    1064:	8f 91       	pop	r24
    1066:	7f 91       	pop	r23
    1068:	6f 91       	pop	r22
    106a:	5f 91       	pop	r21
    106c:	4f 91       	pop	r20
    106e:	3f 91       	pop	r19
    1070:	2f 91       	pop	r18
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	0f 90       	pop	r0
    1078:	1f 90       	pop	r1
    107a:	18 95       	reti

0000107c <__subsf3>:
    107c:	50 58       	subi	r21, 0x80	; 128

0000107e <__addsf3>:
    107e:	bb 27       	eor	r27, r27
    1080:	aa 27       	eor	r26, r26
    1082:	0e d0       	rcall	.+28     	; 0x10a0 <__addsf3x>
    1084:	70 c1       	rjmp	.+736    	; 0x1366 <__fp_round>
    1086:	61 d1       	rcall	.+706    	; 0x134a <__fp_pscA>
    1088:	30 f0       	brcs	.+12     	; 0x1096 <__addsf3+0x18>
    108a:	66 d1       	rcall	.+716    	; 0x1358 <__fp_pscB>
    108c:	20 f0       	brcs	.+8      	; 0x1096 <__addsf3+0x18>
    108e:	31 f4       	brne	.+12     	; 0x109c <__addsf3+0x1e>
    1090:	9f 3f       	cpi	r25, 0xFF	; 255
    1092:	11 f4       	brne	.+4      	; 0x1098 <__addsf3+0x1a>
    1094:	1e f4       	brtc	.+6      	; 0x109c <__addsf3+0x1e>
    1096:	56 c1       	rjmp	.+684    	; 0x1344 <__fp_nan>
    1098:	0e f4       	brtc	.+2      	; 0x109c <__addsf3+0x1e>
    109a:	e0 95       	com	r30
    109c:	e7 fb       	bst	r30, 7
    109e:	4c c1       	rjmp	.+664    	; 0x1338 <__fp_inf>

000010a0 <__addsf3x>:
    10a0:	e9 2f       	mov	r30, r25
    10a2:	72 d1       	rcall	.+740    	; 0x1388 <__fp_split3>
    10a4:	80 f3       	brcs	.-32     	; 0x1086 <__addsf3+0x8>
    10a6:	ba 17       	cp	r27, r26
    10a8:	62 07       	cpc	r22, r18
    10aa:	73 07       	cpc	r23, r19
    10ac:	84 07       	cpc	r24, r20
    10ae:	95 07       	cpc	r25, r21
    10b0:	18 f0       	brcs	.+6      	; 0x10b8 <__addsf3x+0x18>
    10b2:	71 f4       	brne	.+28     	; 0x10d0 <__addsf3x+0x30>
    10b4:	9e f5       	brtc	.+102    	; 0x111c <__addsf3x+0x7c>
    10b6:	8a c1       	rjmp	.+788    	; 0x13cc <__fp_zero>
    10b8:	0e f4       	brtc	.+2      	; 0x10bc <__addsf3x+0x1c>
    10ba:	e0 95       	com	r30
    10bc:	0b 2e       	mov	r0, r27
    10be:	ba 2f       	mov	r27, r26
    10c0:	a0 2d       	mov	r26, r0
    10c2:	0b 01       	movw	r0, r22
    10c4:	b9 01       	movw	r22, r18
    10c6:	90 01       	movw	r18, r0
    10c8:	0c 01       	movw	r0, r24
    10ca:	ca 01       	movw	r24, r20
    10cc:	a0 01       	movw	r20, r0
    10ce:	11 24       	eor	r1, r1
    10d0:	ff 27       	eor	r31, r31
    10d2:	59 1b       	sub	r21, r25
    10d4:	99 f0       	breq	.+38     	; 0x10fc <__addsf3x+0x5c>
    10d6:	59 3f       	cpi	r21, 0xF9	; 249
    10d8:	50 f4       	brcc	.+20     	; 0x10ee <__addsf3x+0x4e>
    10da:	50 3e       	cpi	r21, 0xE0	; 224
    10dc:	68 f1       	brcs	.+90     	; 0x1138 <__addsf3x+0x98>
    10de:	1a 16       	cp	r1, r26
    10e0:	f0 40       	sbci	r31, 0x00	; 0
    10e2:	a2 2f       	mov	r26, r18
    10e4:	23 2f       	mov	r18, r19
    10e6:	34 2f       	mov	r19, r20
    10e8:	44 27       	eor	r20, r20
    10ea:	58 5f       	subi	r21, 0xF8	; 248
    10ec:	f3 cf       	rjmp	.-26     	; 0x10d4 <__addsf3x+0x34>
    10ee:	46 95       	lsr	r20
    10f0:	37 95       	ror	r19
    10f2:	27 95       	ror	r18
    10f4:	a7 95       	ror	r26
    10f6:	f0 40       	sbci	r31, 0x00	; 0
    10f8:	53 95       	inc	r21
    10fa:	c9 f7       	brne	.-14     	; 0x10ee <__addsf3x+0x4e>
    10fc:	7e f4       	brtc	.+30     	; 0x111c <__addsf3x+0x7c>
    10fe:	1f 16       	cp	r1, r31
    1100:	ba 0b       	sbc	r27, r26
    1102:	62 0b       	sbc	r22, r18
    1104:	73 0b       	sbc	r23, r19
    1106:	84 0b       	sbc	r24, r20
    1108:	ba f0       	brmi	.+46     	; 0x1138 <__addsf3x+0x98>
    110a:	91 50       	subi	r25, 0x01	; 1
    110c:	a1 f0       	breq	.+40     	; 0x1136 <__addsf3x+0x96>
    110e:	ff 0f       	add	r31, r31
    1110:	bb 1f       	adc	r27, r27
    1112:	66 1f       	adc	r22, r22
    1114:	77 1f       	adc	r23, r23
    1116:	88 1f       	adc	r24, r24
    1118:	c2 f7       	brpl	.-16     	; 0x110a <__addsf3x+0x6a>
    111a:	0e c0       	rjmp	.+28     	; 0x1138 <__addsf3x+0x98>
    111c:	ba 0f       	add	r27, r26
    111e:	62 1f       	adc	r22, r18
    1120:	73 1f       	adc	r23, r19
    1122:	84 1f       	adc	r24, r20
    1124:	48 f4       	brcc	.+18     	; 0x1138 <__addsf3x+0x98>
    1126:	87 95       	ror	r24
    1128:	77 95       	ror	r23
    112a:	67 95       	ror	r22
    112c:	b7 95       	ror	r27
    112e:	f7 95       	ror	r31
    1130:	9e 3f       	cpi	r25, 0xFE	; 254
    1132:	08 f0       	brcs	.+2      	; 0x1136 <__addsf3x+0x96>
    1134:	b3 cf       	rjmp	.-154    	; 0x109c <__addsf3+0x1e>
    1136:	93 95       	inc	r25
    1138:	88 0f       	add	r24, r24
    113a:	08 f0       	brcs	.+2      	; 0x113e <__addsf3x+0x9e>
    113c:	99 27       	eor	r25, r25
    113e:	ee 0f       	add	r30, r30
    1140:	97 95       	ror	r25
    1142:	87 95       	ror	r24
    1144:	08 95       	ret

00001146 <__cmpsf2>:
    1146:	d4 d0       	rcall	.+424    	; 0x12f0 <__fp_cmp>
    1148:	08 f4       	brcc	.+2      	; 0x114c <__cmpsf2+0x6>
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	08 95       	ret

0000114e <__divsf3>:
    114e:	0c d0       	rcall	.+24     	; 0x1168 <__divsf3x>
    1150:	0a c1       	rjmp	.+532    	; 0x1366 <__fp_round>
    1152:	02 d1       	rcall	.+516    	; 0x1358 <__fp_pscB>
    1154:	40 f0       	brcs	.+16     	; 0x1166 <__divsf3+0x18>
    1156:	f9 d0       	rcall	.+498    	; 0x134a <__fp_pscA>
    1158:	30 f0       	brcs	.+12     	; 0x1166 <__divsf3+0x18>
    115a:	21 f4       	brne	.+8      	; 0x1164 <__divsf3+0x16>
    115c:	5f 3f       	cpi	r21, 0xFF	; 255
    115e:	19 f0       	breq	.+6      	; 0x1166 <__divsf3+0x18>
    1160:	eb c0       	rjmp	.+470    	; 0x1338 <__fp_inf>
    1162:	51 11       	cpse	r21, r1
    1164:	34 c1       	rjmp	.+616    	; 0x13ce <__fp_szero>
    1166:	ee c0       	rjmp	.+476    	; 0x1344 <__fp_nan>

00001168 <__divsf3x>:
    1168:	0f d1       	rcall	.+542    	; 0x1388 <__fp_split3>
    116a:	98 f3       	brcs	.-26     	; 0x1152 <__divsf3+0x4>

0000116c <__divsf3_pse>:
    116c:	99 23       	and	r25, r25
    116e:	c9 f3       	breq	.-14     	; 0x1162 <__divsf3+0x14>
    1170:	55 23       	and	r21, r21
    1172:	b1 f3       	breq	.-20     	; 0x1160 <__divsf3+0x12>
    1174:	95 1b       	sub	r25, r21
    1176:	55 0b       	sbc	r21, r21
    1178:	bb 27       	eor	r27, r27
    117a:	aa 27       	eor	r26, r26
    117c:	62 17       	cp	r22, r18
    117e:	73 07       	cpc	r23, r19
    1180:	84 07       	cpc	r24, r20
    1182:	38 f0       	brcs	.+14     	; 0x1192 <__divsf3_pse+0x26>
    1184:	9f 5f       	subi	r25, 0xFF	; 255
    1186:	5f 4f       	sbci	r21, 0xFF	; 255
    1188:	22 0f       	add	r18, r18
    118a:	33 1f       	adc	r19, r19
    118c:	44 1f       	adc	r20, r20
    118e:	aa 1f       	adc	r26, r26
    1190:	a9 f3       	breq	.-22     	; 0x117c <__divsf3_pse+0x10>
    1192:	33 d0       	rcall	.+102    	; 0x11fa <__divsf3_pse+0x8e>
    1194:	0e 2e       	mov	r0, r30
    1196:	3a f0       	brmi	.+14     	; 0x11a6 <__divsf3_pse+0x3a>
    1198:	e0 e8       	ldi	r30, 0x80	; 128
    119a:	30 d0       	rcall	.+96     	; 0x11fc <__divsf3_pse+0x90>
    119c:	91 50       	subi	r25, 0x01	; 1
    119e:	50 40       	sbci	r21, 0x00	; 0
    11a0:	e6 95       	lsr	r30
    11a2:	00 1c       	adc	r0, r0
    11a4:	ca f7       	brpl	.-14     	; 0x1198 <__divsf3_pse+0x2c>
    11a6:	29 d0       	rcall	.+82     	; 0x11fa <__divsf3_pse+0x8e>
    11a8:	fe 2f       	mov	r31, r30
    11aa:	27 d0       	rcall	.+78     	; 0x11fa <__divsf3_pse+0x8e>
    11ac:	66 0f       	add	r22, r22
    11ae:	77 1f       	adc	r23, r23
    11b0:	88 1f       	adc	r24, r24
    11b2:	bb 1f       	adc	r27, r27
    11b4:	26 17       	cp	r18, r22
    11b6:	37 07       	cpc	r19, r23
    11b8:	48 07       	cpc	r20, r24
    11ba:	ab 07       	cpc	r26, r27
    11bc:	b0 e8       	ldi	r27, 0x80	; 128
    11be:	09 f0       	breq	.+2      	; 0x11c2 <__divsf3_pse+0x56>
    11c0:	bb 0b       	sbc	r27, r27
    11c2:	80 2d       	mov	r24, r0
    11c4:	bf 01       	movw	r22, r30
    11c6:	ff 27       	eor	r31, r31
    11c8:	93 58       	subi	r25, 0x83	; 131
    11ca:	5f 4f       	sbci	r21, 0xFF	; 255
    11cc:	2a f0       	brmi	.+10     	; 0x11d8 <__divsf3_pse+0x6c>
    11ce:	9e 3f       	cpi	r25, 0xFE	; 254
    11d0:	51 05       	cpc	r21, r1
    11d2:	68 f0       	brcs	.+26     	; 0x11ee <__divsf3_pse+0x82>
    11d4:	b1 c0       	rjmp	.+354    	; 0x1338 <__fp_inf>
    11d6:	fb c0       	rjmp	.+502    	; 0x13ce <__fp_szero>
    11d8:	5f 3f       	cpi	r21, 0xFF	; 255
    11da:	ec f3       	brlt	.-6      	; 0x11d6 <__divsf3_pse+0x6a>
    11dc:	98 3e       	cpi	r25, 0xE8	; 232
    11de:	dc f3       	brlt	.-10     	; 0x11d6 <__divsf3_pse+0x6a>
    11e0:	86 95       	lsr	r24
    11e2:	77 95       	ror	r23
    11e4:	67 95       	ror	r22
    11e6:	b7 95       	ror	r27
    11e8:	f7 95       	ror	r31
    11ea:	9f 5f       	subi	r25, 0xFF	; 255
    11ec:	c9 f7       	brne	.-14     	; 0x11e0 <__divsf3_pse+0x74>
    11ee:	88 0f       	add	r24, r24
    11f0:	91 1d       	adc	r25, r1
    11f2:	96 95       	lsr	r25
    11f4:	87 95       	ror	r24
    11f6:	97 f9       	bld	r25, 7
    11f8:	08 95       	ret
    11fa:	e1 e0       	ldi	r30, 0x01	; 1
    11fc:	66 0f       	add	r22, r22
    11fe:	77 1f       	adc	r23, r23
    1200:	88 1f       	adc	r24, r24
    1202:	bb 1f       	adc	r27, r27
    1204:	62 17       	cp	r22, r18
    1206:	73 07       	cpc	r23, r19
    1208:	84 07       	cpc	r24, r20
    120a:	ba 07       	cpc	r27, r26
    120c:	20 f0       	brcs	.+8      	; 0x1216 <__divsf3_pse+0xaa>
    120e:	62 1b       	sub	r22, r18
    1210:	73 0b       	sbc	r23, r19
    1212:	84 0b       	sbc	r24, r20
    1214:	ba 0b       	sbc	r27, r26
    1216:	ee 1f       	adc	r30, r30
    1218:	88 f7       	brcc	.-30     	; 0x11fc <__divsf3_pse+0x90>
    121a:	e0 95       	com	r30
    121c:	08 95       	ret

0000121e <__fixunssfsi>:
    121e:	bc d0       	rcall	.+376    	; 0x1398 <__fp_splitA>
    1220:	88 f0       	brcs	.+34     	; 0x1244 <__fixunssfsi+0x26>
    1222:	9f 57       	subi	r25, 0x7F	; 127
    1224:	90 f0       	brcs	.+36     	; 0x124a <__fixunssfsi+0x2c>
    1226:	b9 2f       	mov	r27, r25
    1228:	99 27       	eor	r25, r25
    122a:	b7 51       	subi	r27, 0x17	; 23
    122c:	a0 f0       	brcs	.+40     	; 0x1256 <__fixunssfsi+0x38>
    122e:	d1 f0       	breq	.+52     	; 0x1264 <__fixunssfsi+0x46>
    1230:	66 0f       	add	r22, r22
    1232:	77 1f       	adc	r23, r23
    1234:	88 1f       	adc	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	1a f0       	brmi	.+6      	; 0x1240 <__fixunssfsi+0x22>
    123a:	ba 95       	dec	r27
    123c:	c9 f7       	brne	.-14     	; 0x1230 <__fixunssfsi+0x12>
    123e:	12 c0       	rjmp	.+36     	; 0x1264 <__fixunssfsi+0x46>
    1240:	b1 30       	cpi	r27, 0x01	; 1
    1242:	81 f0       	breq	.+32     	; 0x1264 <__fixunssfsi+0x46>
    1244:	c3 d0       	rcall	.+390    	; 0x13cc <__fp_zero>
    1246:	b1 e0       	ldi	r27, 0x01	; 1
    1248:	08 95       	ret
    124a:	c0 c0       	rjmp	.+384    	; 0x13cc <__fp_zero>
    124c:	67 2f       	mov	r22, r23
    124e:	78 2f       	mov	r23, r24
    1250:	88 27       	eor	r24, r24
    1252:	b8 5f       	subi	r27, 0xF8	; 248
    1254:	39 f0       	breq	.+14     	; 0x1264 <__fixunssfsi+0x46>
    1256:	b9 3f       	cpi	r27, 0xF9	; 249
    1258:	cc f3       	brlt	.-14     	; 0x124c <__fixunssfsi+0x2e>
    125a:	86 95       	lsr	r24
    125c:	77 95       	ror	r23
    125e:	67 95       	ror	r22
    1260:	b3 95       	inc	r27
    1262:	d9 f7       	brne	.-10     	; 0x125a <__fixunssfsi+0x3c>
    1264:	3e f4       	brtc	.+14     	; 0x1274 <__fixunssfsi+0x56>
    1266:	90 95       	com	r25
    1268:	80 95       	com	r24
    126a:	70 95       	com	r23
    126c:	61 95       	neg	r22
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	8f 4f       	sbci	r24, 0xFF	; 255
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	08 95       	ret

00001276 <__floatunsisf>:
    1276:	e8 94       	clt
    1278:	09 c0       	rjmp	.+18     	; 0x128c <__floatsisf+0x12>

0000127a <__floatsisf>:
    127a:	97 fb       	bst	r25, 7
    127c:	3e f4       	brtc	.+14     	; 0x128c <__floatsisf+0x12>
    127e:	90 95       	com	r25
    1280:	80 95       	com	r24
    1282:	70 95       	com	r23
    1284:	61 95       	neg	r22
    1286:	7f 4f       	sbci	r23, 0xFF	; 255
    1288:	8f 4f       	sbci	r24, 0xFF	; 255
    128a:	9f 4f       	sbci	r25, 0xFF	; 255
    128c:	99 23       	and	r25, r25
    128e:	a9 f0       	breq	.+42     	; 0x12ba <__floatsisf+0x40>
    1290:	f9 2f       	mov	r31, r25
    1292:	96 e9       	ldi	r25, 0x96	; 150
    1294:	bb 27       	eor	r27, r27
    1296:	93 95       	inc	r25
    1298:	f6 95       	lsr	r31
    129a:	87 95       	ror	r24
    129c:	77 95       	ror	r23
    129e:	67 95       	ror	r22
    12a0:	b7 95       	ror	r27
    12a2:	f1 11       	cpse	r31, r1
    12a4:	f8 cf       	rjmp	.-16     	; 0x1296 <__floatsisf+0x1c>
    12a6:	fa f4       	brpl	.+62     	; 0x12e6 <__floatsisf+0x6c>
    12a8:	bb 0f       	add	r27, r27
    12aa:	11 f4       	brne	.+4      	; 0x12b0 <__floatsisf+0x36>
    12ac:	60 ff       	sbrs	r22, 0
    12ae:	1b c0       	rjmp	.+54     	; 0x12e6 <__floatsisf+0x6c>
    12b0:	6f 5f       	subi	r22, 0xFF	; 255
    12b2:	7f 4f       	sbci	r23, 0xFF	; 255
    12b4:	8f 4f       	sbci	r24, 0xFF	; 255
    12b6:	9f 4f       	sbci	r25, 0xFF	; 255
    12b8:	16 c0       	rjmp	.+44     	; 0x12e6 <__floatsisf+0x6c>
    12ba:	88 23       	and	r24, r24
    12bc:	11 f0       	breq	.+4      	; 0x12c2 <__floatsisf+0x48>
    12be:	96 e9       	ldi	r25, 0x96	; 150
    12c0:	11 c0       	rjmp	.+34     	; 0x12e4 <__floatsisf+0x6a>
    12c2:	77 23       	and	r23, r23
    12c4:	21 f0       	breq	.+8      	; 0x12ce <__floatsisf+0x54>
    12c6:	9e e8       	ldi	r25, 0x8E	; 142
    12c8:	87 2f       	mov	r24, r23
    12ca:	76 2f       	mov	r23, r22
    12cc:	05 c0       	rjmp	.+10     	; 0x12d8 <__floatsisf+0x5e>
    12ce:	66 23       	and	r22, r22
    12d0:	71 f0       	breq	.+28     	; 0x12ee <__floatsisf+0x74>
    12d2:	96 e8       	ldi	r25, 0x86	; 134
    12d4:	86 2f       	mov	r24, r22
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	2a f0       	brmi	.+10     	; 0x12e6 <__floatsisf+0x6c>
    12dc:	9a 95       	dec	r25
    12de:	66 0f       	add	r22, r22
    12e0:	77 1f       	adc	r23, r23
    12e2:	88 1f       	adc	r24, r24
    12e4:	da f7       	brpl	.-10     	; 0x12dc <__floatsisf+0x62>
    12e6:	88 0f       	add	r24, r24
    12e8:	96 95       	lsr	r25
    12ea:	87 95       	ror	r24
    12ec:	97 f9       	bld	r25, 7
    12ee:	08 95       	ret

000012f0 <__fp_cmp>:
    12f0:	99 0f       	add	r25, r25
    12f2:	00 08       	sbc	r0, r0
    12f4:	55 0f       	add	r21, r21
    12f6:	aa 0b       	sbc	r26, r26
    12f8:	e0 e8       	ldi	r30, 0x80	; 128
    12fa:	fe ef       	ldi	r31, 0xFE	; 254
    12fc:	16 16       	cp	r1, r22
    12fe:	17 06       	cpc	r1, r23
    1300:	e8 07       	cpc	r30, r24
    1302:	f9 07       	cpc	r31, r25
    1304:	c0 f0       	brcs	.+48     	; 0x1336 <__fp_cmp+0x46>
    1306:	12 16       	cp	r1, r18
    1308:	13 06       	cpc	r1, r19
    130a:	e4 07       	cpc	r30, r20
    130c:	f5 07       	cpc	r31, r21
    130e:	98 f0       	brcs	.+38     	; 0x1336 <__fp_cmp+0x46>
    1310:	62 1b       	sub	r22, r18
    1312:	73 0b       	sbc	r23, r19
    1314:	84 0b       	sbc	r24, r20
    1316:	95 0b       	sbc	r25, r21
    1318:	39 f4       	brne	.+14     	; 0x1328 <__fp_cmp+0x38>
    131a:	0a 26       	eor	r0, r26
    131c:	61 f0       	breq	.+24     	; 0x1336 <__fp_cmp+0x46>
    131e:	23 2b       	or	r18, r19
    1320:	24 2b       	or	r18, r20
    1322:	25 2b       	or	r18, r21
    1324:	21 f4       	brne	.+8      	; 0x132e <__fp_cmp+0x3e>
    1326:	08 95       	ret
    1328:	0a 26       	eor	r0, r26
    132a:	09 f4       	brne	.+2      	; 0x132e <__fp_cmp+0x3e>
    132c:	a1 40       	sbci	r26, 0x01	; 1
    132e:	a6 95       	lsr	r26
    1330:	8f ef       	ldi	r24, 0xFF	; 255
    1332:	81 1d       	adc	r24, r1
    1334:	81 1d       	adc	r24, r1
    1336:	08 95       	ret

00001338 <__fp_inf>:
    1338:	97 f9       	bld	r25, 7
    133a:	9f 67       	ori	r25, 0x7F	; 127
    133c:	80 e8       	ldi	r24, 0x80	; 128
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	08 95       	ret

00001344 <__fp_nan>:
    1344:	9f ef       	ldi	r25, 0xFF	; 255
    1346:	80 ec       	ldi	r24, 0xC0	; 192
    1348:	08 95       	ret

0000134a <__fp_pscA>:
    134a:	00 24       	eor	r0, r0
    134c:	0a 94       	dec	r0
    134e:	16 16       	cp	r1, r22
    1350:	17 06       	cpc	r1, r23
    1352:	18 06       	cpc	r1, r24
    1354:	09 06       	cpc	r0, r25
    1356:	08 95       	ret

00001358 <__fp_pscB>:
    1358:	00 24       	eor	r0, r0
    135a:	0a 94       	dec	r0
    135c:	12 16       	cp	r1, r18
    135e:	13 06       	cpc	r1, r19
    1360:	14 06       	cpc	r1, r20
    1362:	05 06       	cpc	r0, r21
    1364:	08 95       	ret

00001366 <__fp_round>:
    1366:	09 2e       	mov	r0, r25
    1368:	03 94       	inc	r0
    136a:	00 0c       	add	r0, r0
    136c:	11 f4       	brne	.+4      	; 0x1372 <__fp_round+0xc>
    136e:	88 23       	and	r24, r24
    1370:	52 f0       	brmi	.+20     	; 0x1386 <__fp_round+0x20>
    1372:	bb 0f       	add	r27, r27
    1374:	40 f4       	brcc	.+16     	; 0x1386 <__fp_round+0x20>
    1376:	bf 2b       	or	r27, r31
    1378:	11 f4       	brne	.+4      	; 0x137e <__fp_round+0x18>
    137a:	60 ff       	sbrs	r22, 0
    137c:	04 c0       	rjmp	.+8      	; 0x1386 <__fp_round+0x20>
    137e:	6f 5f       	subi	r22, 0xFF	; 255
    1380:	7f 4f       	sbci	r23, 0xFF	; 255
    1382:	8f 4f       	sbci	r24, 0xFF	; 255
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	08 95       	ret

00001388 <__fp_split3>:
    1388:	57 fd       	sbrc	r21, 7
    138a:	90 58       	subi	r25, 0x80	; 128
    138c:	44 0f       	add	r20, r20
    138e:	55 1f       	adc	r21, r21
    1390:	59 f0       	breq	.+22     	; 0x13a8 <__fp_splitA+0x10>
    1392:	5f 3f       	cpi	r21, 0xFF	; 255
    1394:	71 f0       	breq	.+28     	; 0x13b2 <__fp_splitA+0x1a>
    1396:	47 95       	ror	r20

00001398 <__fp_splitA>:
    1398:	88 0f       	add	r24, r24
    139a:	97 fb       	bst	r25, 7
    139c:	99 1f       	adc	r25, r25
    139e:	61 f0       	breq	.+24     	; 0x13b8 <__fp_splitA+0x20>
    13a0:	9f 3f       	cpi	r25, 0xFF	; 255
    13a2:	79 f0       	breq	.+30     	; 0x13c2 <__fp_splitA+0x2a>
    13a4:	87 95       	ror	r24
    13a6:	08 95       	ret
    13a8:	12 16       	cp	r1, r18
    13aa:	13 06       	cpc	r1, r19
    13ac:	14 06       	cpc	r1, r20
    13ae:	55 1f       	adc	r21, r21
    13b0:	f2 cf       	rjmp	.-28     	; 0x1396 <__fp_split3+0xe>
    13b2:	46 95       	lsr	r20
    13b4:	f1 df       	rcall	.-30     	; 0x1398 <__fp_splitA>
    13b6:	08 c0       	rjmp	.+16     	; 0x13c8 <__fp_splitA+0x30>
    13b8:	16 16       	cp	r1, r22
    13ba:	17 06       	cpc	r1, r23
    13bc:	18 06       	cpc	r1, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	f1 cf       	rjmp	.-30     	; 0x13a4 <__fp_splitA+0xc>
    13c2:	86 95       	lsr	r24
    13c4:	71 05       	cpc	r23, r1
    13c6:	61 05       	cpc	r22, r1
    13c8:	08 94       	sec
    13ca:	08 95       	ret

000013cc <__fp_zero>:
    13cc:	e8 94       	clt

000013ce <__fp_szero>:
    13ce:	bb 27       	eor	r27, r27
    13d0:	66 27       	eor	r22, r22
    13d2:	77 27       	eor	r23, r23
    13d4:	cb 01       	movw	r24, r22
    13d6:	97 f9       	bld	r25, 7
    13d8:	08 95       	ret
    13da:	0e f0       	brts	.+2      	; 0x13de <__fp_szero+0x10>
    13dc:	a6 c0       	rjmp	.+332    	; 0x152a <__fp_mpack>
    13de:	b2 cf       	rjmp	.-156    	; 0x1344 <__fp_nan>
    13e0:	68 94       	set
    13e2:	aa cf       	rjmp	.-172    	; 0x1338 <__fp_inf>

000013e4 <log>:
    13e4:	d9 df       	rcall	.-78     	; 0x1398 <__fp_splitA>
    13e6:	c8 f3       	brcs	.-14     	; 0x13da <__fp_szero+0xc>
    13e8:	99 23       	and	r25, r25
    13ea:	d1 f3       	breq	.-12     	; 0x13e0 <__fp_szero+0x12>
    13ec:	c6 f3       	brts	.-16     	; 0x13de <__fp_szero+0x10>
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	1f 93       	push	r17
    13f4:	0f 93       	push	r16
    13f6:	ff 92       	push	r15
    13f8:	c9 2f       	mov	r28, r25
    13fa:	dd 27       	eor	r29, r29
    13fc:	88 23       	and	r24, r24
    13fe:	2a f0       	brmi	.+10     	; 0x140a <log+0x26>
    1400:	21 97       	sbiw	r28, 0x01	; 1
    1402:	66 0f       	add	r22, r22
    1404:	77 1f       	adc	r23, r23
    1406:	88 1f       	adc	r24, r24
    1408:	da f7       	brpl	.-10     	; 0x1400 <log+0x1c>
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e8       	ldi	r20, 0x80	; 128
    1410:	5f eb       	ldi	r21, 0xBF	; 191
    1412:	9f e3       	ldi	r25, 0x3F	; 63
    1414:	88 39       	cpi	r24, 0x98	; 152
    1416:	20 f0       	brcs	.+8      	; 0x1420 <log+0x3c>
    1418:	80 3e       	cpi	r24, 0xE0	; 224
    141a:	30 f0       	brcs	.+12     	; 0x1428 <log+0x44>
    141c:	21 96       	adiw	r28, 0x01	; 1
    141e:	8f 77       	andi	r24, 0x7F	; 127
    1420:	2e de       	rcall	.-932    	; 0x107e <__addsf3>
    1422:	e4 e3       	ldi	r30, 0x34	; 52
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	03 c0       	rjmp	.+6      	; 0x142e <log+0x4a>
    1428:	2a de       	rcall	.-940    	; 0x107e <__addsf3>
    142a:	e1 e6       	ldi	r30, 0x61	; 97
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	8b d0       	rcall	.+278    	; 0x1546 <__fp_powser>
    1430:	8b 01       	movw	r16, r22
    1432:	be 01       	movw	r22, r28
    1434:	ec 01       	movw	r28, r24
    1436:	fb 2e       	mov	r15, r27
    1438:	6f 57       	subi	r22, 0x7F	; 127
    143a:	71 09       	sbc	r23, r1
    143c:	75 95       	asr	r23
    143e:	77 1f       	adc	r23, r23
    1440:	88 0b       	sbc	r24, r24
    1442:	99 0b       	sbc	r25, r25
    1444:	1a df       	rcall	.-460    	; 0x127a <__floatsisf>
    1446:	28 e1       	ldi	r18, 0x18	; 24
    1448:	32 e7       	ldi	r19, 0x72	; 114
    144a:	41 e3       	ldi	r20, 0x31	; 49
    144c:	5f e3       	ldi	r21, 0x3F	; 63
    144e:	16 d0       	rcall	.+44     	; 0x147c <__mulsf3x>
    1450:	af 2d       	mov	r26, r15
    1452:	98 01       	movw	r18, r16
    1454:	ae 01       	movw	r20, r28
    1456:	ff 90       	pop	r15
    1458:	0f 91       	pop	r16
    145a:	1f 91       	pop	r17
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	1f de       	rcall	.-962    	; 0x10a0 <__addsf3x>
    1462:	81 cf       	rjmp	.-254    	; 0x1366 <__fp_round>

00001464 <__mulsf3>:
    1464:	0b d0       	rcall	.+22     	; 0x147c <__mulsf3x>
    1466:	7f cf       	rjmp	.-258    	; 0x1366 <__fp_round>
    1468:	70 df       	rcall	.-288    	; 0x134a <__fp_pscA>
    146a:	28 f0       	brcs	.+10     	; 0x1476 <__mulsf3+0x12>
    146c:	75 df       	rcall	.-278    	; 0x1358 <__fp_pscB>
    146e:	18 f0       	brcs	.+6      	; 0x1476 <__mulsf3+0x12>
    1470:	95 23       	and	r25, r21
    1472:	09 f0       	breq	.+2      	; 0x1476 <__mulsf3+0x12>
    1474:	61 cf       	rjmp	.-318    	; 0x1338 <__fp_inf>
    1476:	66 cf       	rjmp	.-308    	; 0x1344 <__fp_nan>
    1478:	11 24       	eor	r1, r1
    147a:	a9 cf       	rjmp	.-174    	; 0x13ce <__fp_szero>

0000147c <__mulsf3x>:
    147c:	85 df       	rcall	.-246    	; 0x1388 <__fp_split3>
    147e:	a0 f3       	brcs	.-24     	; 0x1468 <__mulsf3+0x4>

00001480 <__mulsf3_pse>:
    1480:	95 9f       	mul	r25, r21
    1482:	d1 f3       	breq	.-12     	; 0x1478 <__mulsf3+0x14>
    1484:	95 0f       	add	r25, r21
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	55 1f       	adc	r21, r21
    148a:	62 9f       	mul	r22, r18
    148c:	f0 01       	movw	r30, r0
    148e:	72 9f       	mul	r23, r18
    1490:	bb 27       	eor	r27, r27
    1492:	f0 0d       	add	r31, r0
    1494:	b1 1d       	adc	r27, r1
    1496:	63 9f       	mul	r22, r19
    1498:	aa 27       	eor	r26, r26
    149a:	f0 0d       	add	r31, r0
    149c:	b1 1d       	adc	r27, r1
    149e:	aa 1f       	adc	r26, r26
    14a0:	64 9f       	mul	r22, r20
    14a2:	66 27       	eor	r22, r22
    14a4:	b0 0d       	add	r27, r0
    14a6:	a1 1d       	adc	r26, r1
    14a8:	66 1f       	adc	r22, r22
    14aa:	82 9f       	mul	r24, r18
    14ac:	22 27       	eor	r18, r18
    14ae:	b0 0d       	add	r27, r0
    14b0:	a1 1d       	adc	r26, r1
    14b2:	62 1f       	adc	r22, r18
    14b4:	73 9f       	mul	r23, r19
    14b6:	b0 0d       	add	r27, r0
    14b8:	a1 1d       	adc	r26, r1
    14ba:	62 1f       	adc	r22, r18
    14bc:	83 9f       	mul	r24, r19
    14be:	a0 0d       	add	r26, r0
    14c0:	61 1d       	adc	r22, r1
    14c2:	22 1f       	adc	r18, r18
    14c4:	74 9f       	mul	r23, r20
    14c6:	33 27       	eor	r19, r19
    14c8:	a0 0d       	add	r26, r0
    14ca:	61 1d       	adc	r22, r1
    14cc:	23 1f       	adc	r18, r19
    14ce:	84 9f       	mul	r24, r20
    14d0:	60 0d       	add	r22, r0
    14d2:	21 1d       	adc	r18, r1
    14d4:	82 2f       	mov	r24, r18
    14d6:	76 2f       	mov	r23, r22
    14d8:	6a 2f       	mov	r22, r26
    14da:	11 24       	eor	r1, r1
    14dc:	9f 57       	subi	r25, 0x7F	; 127
    14de:	50 40       	sbci	r21, 0x00	; 0
    14e0:	8a f0       	brmi	.+34     	; 0x1504 <__mulsf3_pse+0x84>
    14e2:	e1 f0       	breq	.+56     	; 0x151c <__mulsf3_pse+0x9c>
    14e4:	88 23       	and	r24, r24
    14e6:	4a f0       	brmi	.+18     	; 0x14fa <__mulsf3_pse+0x7a>
    14e8:	ee 0f       	add	r30, r30
    14ea:	ff 1f       	adc	r31, r31
    14ec:	bb 1f       	adc	r27, r27
    14ee:	66 1f       	adc	r22, r22
    14f0:	77 1f       	adc	r23, r23
    14f2:	88 1f       	adc	r24, r24
    14f4:	91 50       	subi	r25, 0x01	; 1
    14f6:	50 40       	sbci	r21, 0x00	; 0
    14f8:	a9 f7       	brne	.-22     	; 0x14e4 <__mulsf3_pse+0x64>
    14fa:	9e 3f       	cpi	r25, 0xFE	; 254
    14fc:	51 05       	cpc	r21, r1
    14fe:	70 f0       	brcs	.+28     	; 0x151c <__mulsf3_pse+0x9c>
    1500:	1b cf       	rjmp	.-458    	; 0x1338 <__fp_inf>
    1502:	65 cf       	rjmp	.-310    	; 0x13ce <__fp_szero>
    1504:	5f 3f       	cpi	r21, 0xFF	; 255
    1506:	ec f3       	brlt	.-6      	; 0x1502 <__mulsf3_pse+0x82>
    1508:	98 3e       	cpi	r25, 0xE8	; 232
    150a:	dc f3       	brlt	.-10     	; 0x1502 <__mulsf3_pse+0x82>
    150c:	86 95       	lsr	r24
    150e:	77 95       	ror	r23
    1510:	67 95       	ror	r22
    1512:	b7 95       	ror	r27
    1514:	f7 95       	ror	r31
    1516:	e7 95       	ror	r30
    1518:	9f 5f       	subi	r25, 0xFF	; 255
    151a:	c1 f7       	brne	.-16     	; 0x150c <__mulsf3_pse+0x8c>
    151c:	fe 2b       	or	r31, r30
    151e:	88 0f       	add	r24, r24
    1520:	91 1d       	adc	r25, r1
    1522:	96 95       	lsr	r25
    1524:	87 95       	ror	r24
    1526:	97 f9       	bld	r25, 7
    1528:	08 95       	ret

0000152a <__fp_mpack>:
    152a:	9f 3f       	cpi	r25, 0xFF	; 255
    152c:	31 f0       	breq	.+12     	; 0x153a <__fp_mpack_finite+0xc>

0000152e <__fp_mpack_finite>:
    152e:	91 50       	subi	r25, 0x01	; 1
    1530:	20 f4       	brcc	.+8      	; 0x153a <__fp_mpack_finite+0xc>
    1532:	87 95       	ror	r24
    1534:	77 95       	ror	r23
    1536:	67 95       	ror	r22
    1538:	b7 95       	ror	r27
    153a:	88 0f       	add	r24, r24
    153c:	91 1d       	adc	r25, r1
    153e:	96 95       	lsr	r25
    1540:	87 95       	ror	r24
    1542:	97 f9       	bld	r25, 7
    1544:	08 95       	ret

00001546 <__fp_powser>:
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	1f 93       	push	r17
    154c:	0f 93       	push	r16
    154e:	ff 92       	push	r15
    1550:	ef 92       	push	r14
    1552:	df 92       	push	r13
    1554:	7b 01       	movw	r14, r22
    1556:	8c 01       	movw	r16, r24
    1558:	68 94       	set
    155a:	05 c0       	rjmp	.+10     	; 0x1566 <__fp_powser+0x20>
    155c:	da 2e       	mov	r13, r26
    155e:	ef 01       	movw	r28, r30
    1560:	8d df       	rcall	.-230    	; 0x147c <__mulsf3x>
    1562:	fe 01       	movw	r30, r28
    1564:	e8 94       	clt
    1566:	a5 91       	lpm	r26, Z+
    1568:	25 91       	lpm	r18, Z+
    156a:	35 91       	lpm	r19, Z+
    156c:	45 91       	lpm	r20, Z+
    156e:	55 91       	lpm	r21, Z+
    1570:	ae f3       	brts	.-22     	; 0x155c <__fp_powser+0x16>
    1572:	ef 01       	movw	r28, r30
    1574:	95 dd       	rcall	.-1238   	; 0x10a0 <__addsf3x>
    1576:	fe 01       	movw	r30, r28
    1578:	97 01       	movw	r18, r14
    157a:	a8 01       	movw	r20, r16
    157c:	da 94       	dec	r13
    157e:	79 f7       	brne	.-34     	; 0x155e <__fp_powser+0x18>
    1580:	df 90       	pop	r13
    1582:	ef 90       	pop	r14
    1584:	ff 90       	pop	r15
    1586:	0f 91       	pop	r16
    1588:	1f 91       	pop	r17
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <__umulhisi3>:
    1590:	a2 9f       	mul	r26, r18
    1592:	b0 01       	movw	r22, r0
    1594:	b3 9f       	mul	r27, r19
    1596:	c0 01       	movw	r24, r0
    1598:	a3 9f       	mul	r26, r19
    159a:	01 d0       	rcall	.+2      	; 0x159e <__umulhisi3+0xe>
    159c:	b2 9f       	mul	r27, r18
    159e:	70 0d       	add	r23, r0
    15a0:	81 1d       	adc	r24, r1
    15a2:	11 24       	eor	r1, r1
    15a4:	91 1d       	adc	r25, r1
    15a6:	08 95       	ret

000015a8 <itoa>:
    15a8:	45 32       	cpi	r20, 0x25	; 37
    15aa:	51 05       	cpc	r21, r1
    15ac:	18 f4       	brcc	.+6      	; 0x15b4 <itoa+0xc>
    15ae:	42 30       	cpi	r20, 0x02	; 2
    15b0:	08 f0       	brcs	.+2      	; 0x15b4 <itoa+0xc>
    15b2:	04 c0       	rjmp	.+8      	; 0x15bc <__itoa_ncheck>
    15b4:	fb 01       	movw	r30, r22
    15b6:	10 82       	st	Z, r1
    15b8:	cb 01       	movw	r24, r22
    15ba:	08 95       	ret

000015bc <__itoa_ncheck>:
    15bc:	bb 27       	eor	r27, r27
    15be:	4a 30       	cpi	r20, 0x0A	; 10
    15c0:	31 f4       	brne	.+12     	; 0x15ce <__itoa_ncheck+0x12>
    15c2:	99 23       	and	r25, r25
    15c4:	22 f4       	brpl	.+8      	; 0x15ce <__itoa_ncheck+0x12>
    15c6:	bd e2       	ldi	r27, 0x2D	; 45
    15c8:	90 95       	com	r25
    15ca:	81 95       	neg	r24
    15cc:	9f 4f       	sbci	r25, 0xFF	; 255
    15ce:	01 c0       	rjmp	.+2      	; 0x15d2 <__utoa_common>

000015d0 <__utoa_ncheck>:
    15d0:	bb 27       	eor	r27, r27

000015d2 <__utoa_common>:
    15d2:	fb 01       	movw	r30, r22
    15d4:	55 27       	eor	r21, r21
    15d6:	aa 27       	eor	r26, r26
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	aa 1f       	adc	r26, r26
    15de:	a4 17       	cp	r26, r20
    15e0:	10 f0       	brcs	.+4      	; 0x15e6 <__utoa_common+0x14>
    15e2:	a4 1b       	sub	r26, r20
    15e4:	83 95       	inc	r24
    15e6:	50 51       	subi	r21, 0x10	; 16
    15e8:	b9 f7       	brne	.-18     	; 0x15d8 <__utoa_common+0x6>
    15ea:	a0 5d       	subi	r26, 0xD0	; 208
    15ec:	aa 33       	cpi	r26, 0x3A	; 58
    15ee:	08 f0       	brcs	.+2      	; 0x15f2 <__utoa_common+0x20>
    15f0:	a9 5d       	subi	r26, 0xD9	; 217
    15f2:	a1 93       	st	Z+, r26
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	79 f7       	brne	.-34     	; 0x15d6 <__utoa_common+0x4>
    15f8:	b1 11       	cpse	r27, r1
    15fa:	b1 93       	st	Z+, r27
    15fc:	11 92       	st	Z+, r1
    15fe:	cb 01       	movw	r24, r22
    1600:	00 c0       	rjmp	.+0      	; 0x1602 <strrev>

00001602 <strrev>:
    1602:	dc 01       	movw	r26, r24
    1604:	fc 01       	movw	r30, r24
    1606:	67 2f       	mov	r22, r23
    1608:	71 91       	ld	r23, Z+
    160a:	77 23       	and	r23, r23
    160c:	e1 f7       	brne	.-8      	; 0x1606 <strrev+0x4>
    160e:	32 97       	sbiw	r30, 0x02	; 2
    1610:	04 c0       	rjmp	.+8      	; 0x161a <strrev+0x18>
    1612:	7c 91       	ld	r23, X
    1614:	6d 93       	st	X+, r22
    1616:	70 83       	st	Z, r23
    1618:	62 91       	ld	r22, -Z
    161a:	ae 17       	cp	r26, r30
    161c:	bf 07       	cpc	r27, r31
    161e:	c8 f3       	brcs	.-14     	; 0x1612 <strrev+0x10>
    1620:	08 95       	ret

00001622 <_exit>:
    1622:	f8 94       	cli

00001624 <__stop_program>:
    1624:	ff cf       	rjmp	.-2      	; 0x1624 <__stop_program>
